-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_cifm_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cifm_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    cifm_TVALID : IN STD_LOGIC;
    cifm_TREADY : OUT STD_LOGIC;
    ifm_buff0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_0_ce0 : OUT STD_LOGIC;
    ifm_buff0_0_we0 : OUT STD_LOGIC;
    ifm_buff0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_1_ce0 : OUT STD_LOGIC;
    ifm_buff0_1_we0 : OUT STD_LOGIC;
    ifm_buff0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_2_ce0 : OUT STD_LOGIC;
    ifm_buff0_2_we0 : OUT STD_LOGIC;
    ifm_buff0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_0_ce0 : OUT STD_LOGIC;
    ifm_buff1_0_we0 : OUT STD_LOGIC;
    ifm_buff1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_1_ce0 : OUT STD_LOGIC;
    ifm_buff1_1_we0 : OUT STD_LOGIC;
    ifm_buff1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_2_ce0 : OUT STD_LOGIC;
    ifm_buff1_2_we0 : OUT STD_LOGIC;
    ifm_buff1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff2_0_ce0 : OUT STD_LOGIC;
    ifm_buff2_0_we0 : OUT STD_LOGIC;
    ifm_buff2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff2_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff2_1_ce0 : OUT STD_LOGIC;
    ifm_buff2_1_we0 : OUT STD_LOGIC;
    ifm_buff2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff2_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff2_2_ce0 : OUT STD_LOGIC;
    ifm_buff2_2_we0 : OUT STD_LOGIC;
    ifm_buff2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_cifm_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cifm_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln9_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln32_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln54_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal j_1_fu_290_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal j_2_fu_328_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal cifm_counter_0_reg_193 : STD_LOGIC_VECTOR (5 downto 0);
    signal j1_0_reg_204 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j2_0_reg_215 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln12_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln12_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln57_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cifm_counter_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                cifm_counter_0_reg_193 <= j_fu_252_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cifm_counter_0_reg_193 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j1_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j1_0_reg_204 <= ap_const_lv6_0;
            elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) then 
                j1_0_reg_204 <= j_1_fu_290_p2;
            end if; 
        end if;
    end process;

    j2_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j2_0_reg_215 <= ap_const_lv6_0;
            elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) then 
                j2_0_reg_215 <= j_2_fu_328_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2, ap_CS_fsm_state4, icmp_ln32_fu_284_p2, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state2_assign_proc : process(cifm_TVALID, icmp_ln9_fu_246_p2)
    begin
                ap_block_state2 <= ((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(cifm_TVALID, icmp_ln32_fu_284_p2)
    begin
                ap_block_state4 <= ((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0));
    end process;


    ap_block_state6_assign_proc : process(cifm_TVALID, icmp_ln54_fu_322_p2)
    begin
                ap_block_state6 <= ((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cifm_TDATA_blk_n_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2, ap_CS_fsm_state4, icmp_ln32_fu_284_p2, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0)))) then 
            cifm_TDATA_blk_n <= cifm_TVALID;
        else 
            cifm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cifm_TREADY_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2, ap_CS_fsm_state4, icmp_ln32_fu_284_p2, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if (((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0)) or (not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0)))) then 
            cifm_TREADY <= ap_const_logic_1;
        else 
            cifm_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_226_p4 <= cifm_TDATA(63 downto 32);
    grp_fu_236_p4 <= cifm_TDATA(95 downto 64);
    icmp_ln32_fu_284_p2 <= "1" when (j1_0_reg_204 = ap_const_lv6_22) else "0";
    icmp_ln54_fu_322_p2 <= "1" when (j2_0_reg_215 = ap_const_lv6_22) else "0";
    icmp_ln9_fu_246_p2 <= "1" when (cifm_counter_0_reg_193 = ap_const_lv6_22) else "0";
    ifm_buff0_0_address0 <= zext_ln12_fu_258_p1(6 - 1 downto 0);

    ifm_buff0_0_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_0_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_0_d0 <= trunc_ln12_fu_265_p1;

    ifm_buff0_0_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_0_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_1_address0 <= zext_ln12_fu_258_p1(6 - 1 downto 0);

    ifm_buff0_1_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_1_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_1_d0 <= grp_fu_226_p4;

    ifm_buff0_1_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_1_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_2_address0 <= zext_ln12_fu_258_p1(6 - 1 downto 0);

    ifm_buff0_2_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_2_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_2_d0 <= grp_fu_236_p4;

    ifm_buff0_2_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_246_p2)
    begin
        if ((not(((icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (cifm_TVALID = ap_const_logic_0))) and (icmp_ln9_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_2_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_0_address0 <= zext_ln35_fu_305_p1(6 - 1 downto 0);

    ifm_buff1_0_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_0_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_0_d0 <= trunc_ln35_fu_296_p1;

    ifm_buff1_0_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) then 
            ifm_buff1_0_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_1_address0 <= zext_ln35_fu_305_p1(6 - 1 downto 0);

    ifm_buff1_1_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_1_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_1_d0 <= grp_fu_226_p4;

    ifm_buff1_1_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) then 
            ifm_buff1_1_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_2_address0 <= zext_ln35_fu_305_p1(6 - 1 downto 0);

    ifm_buff1_2_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_2_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_2_d0 <= grp_fu_236_p4;

    ifm_buff1_2_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_284_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln32_fu_284_p2 = ap_const_lv1_0))) then 
            ifm_buff1_2_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_0_address0 <= zext_ln57_fu_343_p1(6 - 1 downto 0);

    ifm_buff2_0_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ifm_buff2_0_ce0 <= ap_const_logic_1;
        else 
            ifm_buff2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_0_d0 <= trunc_ln57_fu_334_p1;

    ifm_buff2_0_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) then 
            ifm_buff2_0_we0 <= ap_const_logic_1;
        else 
            ifm_buff2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_1_address0 <= zext_ln57_fu_343_p1(6 - 1 downto 0);

    ifm_buff2_1_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ifm_buff2_1_ce0 <= ap_const_logic_1;
        else 
            ifm_buff2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_1_d0 <= grp_fu_226_p4;

    ifm_buff2_1_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) then 
            ifm_buff2_1_we0 <= ap_const_logic_1;
        else 
            ifm_buff2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_2_address0 <= zext_ln57_fu_343_p1(6 - 1 downto 0);

    ifm_buff2_2_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ifm_buff2_2_ce0 <= ap_const_logic_1;
        else 
            ifm_buff2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff2_2_d0 <= grp_fu_236_p4;

    ifm_buff2_2_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state6, icmp_ln54_fu_322_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln54_fu_322_p2 = ap_const_lv1_0))) then 
            ifm_buff2_2_we0 <= ap_const_logic_1;
        else 
            ifm_buff2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_290_p2 <= std_logic_vector(unsigned(j1_0_reg_204) + unsigned(ap_const_lv6_1));
    j_2_fu_328_p2 <= std_logic_vector(unsigned(j2_0_reg_215) + unsigned(ap_const_lv6_1));
    j_fu_252_p2 <= std_logic_vector(unsigned(cifm_counter_0_reg_193) + unsigned(ap_const_lv6_1));
    trunc_ln12_fu_265_p1 <= cifm_TDATA(32 - 1 downto 0);
    trunc_ln35_fu_296_p1 <= cifm_TDATA(32 - 1 downto 0);
    trunc_ln57_fu_334_p1 <= cifm_TDATA(32 - 1 downto 0);
    zext_ln12_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cifm_counter_0_reg_193),64));
    zext_ln35_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_204),64));
    zext_ln57_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_215),64));
end behav;
