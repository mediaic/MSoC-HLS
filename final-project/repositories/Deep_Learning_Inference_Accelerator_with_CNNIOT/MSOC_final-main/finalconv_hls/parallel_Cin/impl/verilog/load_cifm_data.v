// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_cifm_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cifm_TDATA,
        cifm_TVALID,
        cifm_TREADY,
        ifm_buff0_0_address0,
        ifm_buff0_0_ce0,
        ifm_buff0_0_we0,
        ifm_buff0_0_d0,
        ifm_buff0_1_address0,
        ifm_buff0_1_ce0,
        ifm_buff0_1_we0,
        ifm_buff0_1_d0,
        ifm_buff0_2_address0,
        ifm_buff0_2_ce0,
        ifm_buff0_2_we0,
        ifm_buff0_2_d0,
        ifm_buff1_0_address0,
        ifm_buff1_0_ce0,
        ifm_buff1_0_we0,
        ifm_buff1_0_d0,
        ifm_buff1_1_address0,
        ifm_buff1_1_ce0,
        ifm_buff1_1_we0,
        ifm_buff1_1_d0,
        ifm_buff1_2_address0,
        ifm_buff1_2_ce0,
        ifm_buff1_2_we0,
        ifm_buff1_2_d0,
        ifm_buff2_0_address0,
        ifm_buff2_0_ce0,
        ifm_buff2_0_we0,
        ifm_buff2_0_d0,
        ifm_buff2_1_address0,
        ifm_buff2_1_ce0,
        ifm_buff2_1_we0,
        ifm_buff2_1_d0,
        ifm_buff2_2_address0,
        ifm_buff2_2_ce0,
        ifm_buff2_2_we0,
        ifm_buff2_2_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cifm_TDATA;
input   cifm_TVALID;
output   cifm_TREADY;
output  [5:0] ifm_buff0_0_address0;
output   ifm_buff0_0_ce0;
output   ifm_buff0_0_we0;
output  [31:0] ifm_buff0_0_d0;
output  [5:0] ifm_buff0_1_address0;
output   ifm_buff0_1_ce0;
output   ifm_buff0_1_we0;
output  [31:0] ifm_buff0_1_d0;
output  [5:0] ifm_buff0_2_address0;
output   ifm_buff0_2_ce0;
output   ifm_buff0_2_we0;
output  [31:0] ifm_buff0_2_d0;
output  [5:0] ifm_buff1_0_address0;
output   ifm_buff1_0_ce0;
output   ifm_buff1_0_we0;
output  [31:0] ifm_buff1_0_d0;
output  [5:0] ifm_buff1_1_address0;
output   ifm_buff1_1_ce0;
output   ifm_buff1_1_we0;
output  [31:0] ifm_buff1_1_d0;
output  [5:0] ifm_buff1_2_address0;
output   ifm_buff1_2_ce0;
output   ifm_buff1_2_we0;
output  [31:0] ifm_buff1_2_d0;
output  [5:0] ifm_buff2_0_address0;
output   ifm_buff2_0_ce0;
output   ifm_buff2_0_we0;
output  [31:0] ifm_buff2_0_d0;
output  [5:0] ifm_buff2_1_address0;
output   ifm_buff2_1_ce0;
output   ifm_buff2_1_we0;
output  [31:0] ifm_buff2_1_d0;
output  [5:0] ifm_buff2_2_address0;
output   ifm_buff2_2_ce0;
output   ifm_buff2_2_we0;
output  [31:0] ifm_buff2_2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cifm_TREADY;
reg ifm_buff0_0_ce0;
reg ifm_buff0_0_we0;
reg ifm_buff0_1_ce0;
reg ifm_buff0_1_we0;
reg ifm_buff0_2_ce0;
reg ifm_buff0_2_we0;
reg ifm_buff1_0_ce0;
reg ifm_buff1_0_we0;
reg ifm_buff1_1_ce0;
reg ifm_buff1_1_we0;
reg ifm_buff1_2_ce0;
reg ifm_buff1_2_we0;
reg ifm_buff2_0_ce0;
reg ifm_buff2_0_we0;
reg ifm_buff2_1_ce0;
reg ifm_buff2_1_we0;
reg ifm_buff2_2_ce0;
reg ifm_buff2_2_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cifm_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln9_fu_246_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln32_fu_284_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln54_fu_322_p2;
wire   [5:0] j_fu_252_p2;
reg    ap_block_state2;
wire   [5:0] j_1_fu_290_p2;
reg    ap_block_state4;
wire   [5:0] j_2_fu_328_p2;
reg    ap_block_state6;
reg   [5:0] cifm_counter_0_reg_193;
reg   [5:0] j1_0_reg_204;
wire    ap_CS_fsm_state3;
reg   [5:0] j2_0_reg_215;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln12_fu_258_p1;
wire   [63:0] zext_ln35_fu_305_p1;
wire   [63:0] zext_ln57_fu_343_p1;
wire   [31:0] trunc_ln12_fu_265_p1;
wire   [31:0] grp_fu_226_p4;
wire   [31:0] grp_fu_236_p4;
wire   [31:0] trunc_ln35_fu_296_p1;
wire   [31:0] trunc_ln57_fu_334_p1;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cifm_counter_0_reg_193 <= j_fu_252_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cifm_counter_0_reg_193 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j1_0_reg_204 <= 6'd0;
    end else if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0))) begin
        j1_0_reg_204 <= j_1_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j2_0_reg_215 <= 6'd0;
    end else if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0))) begin
        j2_0_reg_215 <= j_2_fu_328_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0)))) begin
        cifm_TDATA_blk_n = cifm_TVALID;
    end else begin
        cifm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0)) | (~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0)))) begin
        cifm_TREADY = 1'b1;
    end else begin
        cifm_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_0_ce0 = 1'b1;
    end else begin
        ifm_buff0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_0_we0 = 1'b1;
    end else begin
        ifm_buff0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_1_ce0 = 1'b1;
    end else begin
        ifm_buff0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_1_we0 = 1'b1;
    end else begin
        ifm_buff0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_2_ce0 = 1'b1;
    end else begin
        ifm_buff0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_2_we0 = 1'b1;
    end else begin
        ifm_buff0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ifm_buff1_0_ce0 = 1'b1;
    end else begin
        ifm_buff1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0))) begin
        ifm_buff1_0_we0 = 1'b1;
    end else begin
        ifm_buff1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ifm_buff1_1_ce0 = 1'b1;
    end else begin
        ifm_buff1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0))) begin
        ifm_buff1_1_we0 = 1'b1;
    end else begin
        ifm_buff1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ifm_buff1_2_ce0 = 1'b1;
    end else begin
        ifm_buff1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0))) begin
        ifm_buff1_2_we0 = 1'b1;
    end else begin
        ifm_buff1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ifm_buff2_0_ce0 = 1'b1;
    end else begin
        ifm_buff2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0))) begin
        ifm_buff2_0_we0 = 1'b1;
    end else begin
        ifm_buff2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ifm_buff2_1_ce0 = 1'b1;
    end else begin
        ifm_buff2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0))) begin
        ifm_buff2_1_we0 = 1'b1;
    end else begin
        ifm_buff2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ifm_buff2_2_ce0 = 1'b1;
    end else begin
        ifm_buff2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0))) begin
        ifm_buff2_2_we0 = 1'b1;
    end else begin
        ifm_buff2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln9_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln32_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln54_fu_322_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state2 = ((icmp_ln9_fu_246_p2 == 1'd0) & (cifm_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((cifm_TVALID == 1'b0) & (icmp_ln32_fu_284_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state6 = ((cifm_TVALID == 1'b0) & (icmp_ln54_fu_322_p2 == 1'd0));
end

assign grp_fu_226_p4 = {{cifm_TDATA[63:32]}};

assign grp_fu_236_p4 = {{cifm_TDATA[95:64]}};

assign icmp_ln32_fu_284_p2 = ((j1_0_reg_204 == 6'd34) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_322_p2 = ((j2_0_reg_215 == 6'd34) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_246_p2 = ((cifm_counter_0_reg_193 == 6'd34) ? 1'b1 : 1'b0);

assign ifm_buff0_0_address0 = zext_ln12_fu_258_p1;

assign ifm_buff0_0_d0 = trunc_ln12_fu_265_p1;

assign ifm_buff0_1_address0 = zext_ln12_fu_258_p1;

assign ifm_buff0_1_d0 = grp_fu_226_p4;

assign ifm_buff0_2_address0 = zext_ln12_fu_258_p1;

assign ifm_buff0_2_d0 = grp_fu_236_p4;

assign ifm_buff1_0_address0 = zext_ln35_fu_305_p1;

assign ifm_buff1_0_d0 = trunc_ln35_fu_296_p1;

assign ifm_buff1_1_address0 = zext_ln35_fu_305_p1;

assign ifm_buff1_1_d0 = grp_fu_226_p4;

assign ifm_buff1_2_address0 = zext_ln35_fu_305_p1;

assign ifm_buff1_2_d0 = grp_fu_236_p4;

assign ifm_buff2_0_address0 = zext_ln57_fu_343_p1;

assign ifm_buff2_0_d0 = trunc_ln57_fu_334_p1;

assign ifm_buff2_1_address0 = zext_ln57_fu_343_p1;

assign ifm_buff2_1_d0 = grp_fu_226_p4;

assign ifm_buff2_2_address0 = zext_ln57_fu_343_p1;

assign ifm_buff2_2_d0 = grp_fu_236_p4;

assign j_1_fu_290_p2 = (j1_0_reg_204 + 6'd1);

assign j_2_fu_328_p2 = (j2_0_reg_215 + 6'd1);

assign j_fu_252_p2 = (cifm_counter_0_reg_193 + 6'd1);

assign trunc_ln12_fu_265_p1 = cifm_TDATA[31:0];

assign trunc_ln35_fu_296_p1 = cifm_TDATA[31:0];

assign trunc_ln57_fu_334_p1 = cifm_TDATA[31:0];

assign zext_ln12_fu_258_p1 = cifm_counter_0_reg_193;

assign zext_ln35_fu_305_p1 = j1_0_reg_204;

assign zext_ln57_fu_343_p1 = j2_0_reg_215;

endmodule //load_cifm_data
