// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _conv_read_HH_
#define _conv_read_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct conv_read : public sc_module {
    // Port declarations 33
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<512> > cofm_i_TDATA;
    sc_in< sc_logic > cofm_i_TVALID;
    sc_out< sc_logic > cofm_i_TREADY;
    sc_out< sc_lv<512> > cofm_o_TDATA;
    sc_out< sc_logic > cofm_o_TVALID;
    sc_in< sc_logic > cofm_o_TREADY;
    sc_out< sc_lv<5> > ofm_buff0_0_address0;
    sc_out< sc_logic > ofm_buff0_0_ce0;
    sc_in< sc_lv<32> > ofm_buff0_0_q0;
    sc_out< sc_lv<5> > ofm_buff0_1_address0;
    sc_out< sc_logic > ofm_buff0_1_ce0;
    sc_in< sc_lv<32> > ofm_buff0_1_q0;
    sc_out< sc_lv<5> > ofm_buff0_2_address0;
    sc_out< sc_logic > ofm_buff0_2_ce0;
    sc_in< sc_lv<32> > ofm_buff0_2_q0;
    sc_out< sc_lv<5> > ofm_buff0_3_address0;
    sc_out< sc_logic > ofm_buff0_3_ce0;
    sc_in< sc_lv<32> > ofm_buff0_3_q0;
    sc_out< sc_lv<5> > ofm_buff0_4_address0;
    sc_out< sc_logic > ofm_buff0_4_ce0;
    sc_in< sc_lv<32> > ofm_buff0_4_q0;
    sc_out< sc_lv<5> > ofm_buff0_5_address0;
    sc_out< sc_logic > ofm_buff0_5_ce0;
    sc_in< sc_lv<32> > ofm_buff0_5_q0;
    sc_in< sc_lv<32> > cofm_counter_read;
    sc_in< sc_logic > enable;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    conv_read(sc_module_name name);
    SC_HAS_PROCESS(conv_read);

    ~conv_read();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > cofm_TDATA_i_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln233_reg_285;
    sc_signal< sc_logic > cofm_TDATA_o_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<6> > j_0_reg_171;
    sc_signal< sc_lv<1> > enable_read_read_fu_68_p2;
    sc_signal< sc_lv<32> > add_ln233_fu_191_p2;
    sc_signal< sc_lv<32> > add_ln233_reg_280;
    sc_signal< sc_lv<1> > icmp_ln233_fu_197_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > j_fu_203_p2;
    sc_signal< sc_lv<6> > j_reg_289;
    sc_signal< sc_lv<512> > cofm_b5_addr1516_par_fu_259_p5;
    sc_signal< sc_lv<512> > cofm_b5_addr1516_par_reg_324;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<6> > ap_phi_mux_j_0_phi_fu_175_p4;
    sc_signal< sc_lv<32> > cofm_counter_1_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln236_fu_209_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bitcast_ln241_fu_239_p1;
    sc_signal< sc_lv<32> > bitcast_ln240_fu_235_p1;
    sc_signal< sc_lv<32> > bitcast_ln239_fu_231_p1;
    sc_signal< sc_lv<32> > bitcast_ln238_fu_227_p1;
    sc_signal< sc_lv<32> > bitcast_ln237_fu_223_p1;
    sc_signal< sc_lv<32> > bitcast_ln236_fu_219_p1;
    sc_signal< sc_lv<192> > tmp_s_fu_243_p7;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_BF;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln233_fu_191_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_j_0_phi_fu_175_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_bitcast_ln236_fu_219_p1();
    void thread_bitcast_ln237_fu_223_p1();
    void thread_bitcast_ln238_fu_227_p1();
    void thread_bitcast_ln239_fu_231_p1();
    void thread_bitcast_ln240_fu_235_p1();
    void thread_bitcast_ln241_fu_239_p1();
    void thread_cofm_TDATA_i_blk_n();
    void thread_cofm_TDATA_o_blk_n();
    void thread_cofm_b5_addr1516_par_fu_259_p5();
    void thread_cofm_i_TREADY();
    void thread_cofm_o_TDATA();
    void thread_cofm_o_TVALID();
    void thread_enable_read_read_fu_68_p2();
    void thread_icmp_ln233_fu_197_p2();
    void thread_j_fu_203_p2();
    void thread_ofm_buff0_0_address0();
    void thread_ofm_buff0_0_ce0();
    void thread_ofm_buff0_1_address0();
    void thread_ofm_buff0_1_ce0();
    void thread_ofm_buff0_2_address0();
    void thread_ofm_buff0_2_ce0();
    void thread_ofm_buff0_3_address0();
    void thread_ofm_buff0_3_ce0();
    void thread_ofm_buff0_4_address0();
    void thread_ofm_buff0_4_ce0();
    void thread_ofm_buff0_5_address0();
    void thread_ofm_buff0_5_ce0();
    void thread_tmp_s_fu_243_p7();
    void thread_zext_ln236_fu_209_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
