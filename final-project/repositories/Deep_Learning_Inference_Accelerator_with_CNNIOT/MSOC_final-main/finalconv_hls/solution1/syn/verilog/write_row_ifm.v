// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_row_ifm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cifm_TDATA,
        cifm_TVALID,
        cifm_TREADY,
        ifm_buff0_0_address0,
        ifm_buff0_0_ce0,
        ifm_buff0_0_we0,
        ifm_buff0_0_d0,
        ifm_buff0_1_address0,
        ifm_buff0_1_ce0,
        ifm_buff0_1_we0,
        ifm_buff0_1_d0,
        ifm_buff0_2_address0,
        ifm_buff0_2_ce0,
        ifm_buff0_2_we0,
        ifm_buff0_2_d0,
        cifm_counter_read,
        enable,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cifm_TDATA;
input   cifm_TVALID;
output   cifm_TREADY;
output  [5:0] ifm_buff0_0_address0;
output   ifm_buff0_0_ce0;
output   ifm_buff0_0_we0;
output  [31:0] ifm_buff0_0_d0;
output  [5:0] ifm_buff0_1_address0;
output   ifm_buff0_1_ce0;
output   ifm_buff0_1_we0;
output  [31:0] ifm_buff0_1_d0;
output  [5:0] ifm_buff0_2_address0;
output   ifm_buff0_2_ce0;
output   ifm_buff0_2_we0;
output  [31:0] ifm_buff0_2_d0;
input  [31:0] cifm_counter_read;
input   enable;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cifm_TREADY;
reg ifm_buff0_0_ce0;
reg ifm_buff0_0_we0;
reg ifm_buff0_1_ce0;
reg ifm_buff0_1_we0;
reg ifm_buff0_2_ce0;
reg ifm_buff0_2_we0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cifm_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln82_fu_147_p2;
wire   [0:0] enable_read_read_fu_64_p2;
wire   [31:0] add_ln82_fu_141_p2;
reg   [31:0] add_ln82_reg_214;
wire   [5:0] j_fu_153_p2;
reg    ap_block_state2;
reg   [5:0] j_0_reg_121;
reg   [31:0] ap_phi_mux_cifm_counter_1_phi_fu_135_p4;
reg   [31:0] cifm_counter_1_reg_132;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln85_fu_168_p1;
wire   [31:0] trunc_ln85_fu_159_p1;
wire   [31:0] cifm_a1_load_new6_fu_175_p4;
wire   [31:0] cifm_a2_load_new_fu_190_p4;
reg   [31:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= ap_phi_mux_cifm_counter_1_phi_fu_135_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        cifm_counter_1_reg_132 <= add_ln82_reg_214;
    end else if (((ap_start == 1'b1) & (enable_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        cifm_counter_1_reg_132 <= cifm_counter_read;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_121 <= 6'd0;
    end else if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_121 <= j_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln82_reg_214 <= add_ln82_fu_141_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((enable_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_cifm_counter_1_phi_fu_135_p4 = add_ln82_reg_214;
    end else begin
        ap_phi_mux_cifm_counter_1_phi_fu_135_p4 = cifm_counter_1_reg_132;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = ap_phi_mux_cifm_counter_1_phi_fu_135_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cifm_TDATA_blk_n = cifm_TVALID;
    end else begin
        cifm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cifm_TREADY = 1'b1;
    end else begin
        cifm_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_0_ce0 = 1'b1;
    end else begin
        ifm_buff0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_0_we0 = 1'b1;
    end else begin
        ifm_buff0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_1_ce0 = 1'b1;
    end else begin
        ifm_buff0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_1_we0 = 1'b1;
    end else begin
        ifm_buff0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_2_ce0 = 1'b1;
    end else begin
        ifm_buff0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ifm_buff0_2_we0 = 1'b1;
    end else begin
        ifm_buff0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0)) & (icmp_ln82_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_fu_141_p2 = (cifm_counter_read + 32'd34);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((icmp_ln82_fu_147_p2 == 1'd0) & (cifm_TVALID == 1'b0));
end

assign cifm_a1_load_new6_fu_175_p4 = {{cifm_TDATA[63:32]}};

assign cifm_a2_load_new_fu_190_p4 = {{cifm_TDATA[95:64]}};

assign enable_read_read_fu_64_p2 = enable;

assign icmp_ln82_fu_147_p2 = ((j_0_reg_121 == 6'd34) ? 1'b1 : 1'b0);

assign ifm_buff0_0_address0 = zext_ln85_fu_168_p1;

assign ifm_buff0_0_d0 = trunc_ln85_fu_159_p1;

assign ifm_buff0_1_address0 = zext_ln85_fu_168_p1;

assign ifm_buff0_1_d0 = cifm_a1_load_new6_fu_175_p4;

assign ifm_buff0_2_address0 = zext_ln85_fu_168_p1;

assign ifm_buff0_2_d0 = cifm_a2_load_new_fu_190_p4;

assign j_fu_153_p2 = (j_0_reg_121 + 6'd1);

assign trunc_ln85_fu_159_p1 = cifm_TDATA[31:0];

assign zext_ln85_fu_168_p1 = j_0_reg_121;

endmodule //write_row_ifm
