// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filter_buff_0_0_0_address0,
        filter_buff_0_0_0_ce0,
        filter_buff_0_0_0_q0,
        filter_buff_0_0_1_address0,
        filter_buff_0_0_1_ce0,
        filter_buff_0_0_1_q0,
        filter_buff_0_0_2_address0,
        filter_buff_0_0_2_ce0,
        filter_buff_0_0_2_q0,
        filter_buff_0_1_0_address0,
        filter_buff_0_1_0_ce0,
        filter_buff_0_1_0_q0,
        filter_buff_0_1_1_address0,
        filter_buff_0_1_1_ce0,
        filter_buff_0_1_1_q0,
        filter_buff_0_1_2_address0,
        filter_buff_0_1_2_ce0,
        filter_buff_0_1_2_q0,
        filter_buff_0_2_0_address0,
        filter_buff_0_2_0_ce0,
        filter_buff_0_2_0_q0,
        filter_buff_0_2_1_address0,
        filter_buff_0_2_1_ce0,
        filter_buff_0_2_1_q0,
        filter_buff_0_2_2_address0,
        filter_buff_0_2_2_ce0,
        filter_buff_0_2_2_q0,
        filter_buff_1_0_0_address0,
        filter_buff_1_0_0_ce0,
        filter_buff_1_0_0_q0,
        filter_buff_1_0_1_address0,
        filter_buff_1_0_1_ce0,
        filter_buff_1_0_1_q0,
        filter_buff_1_0_2_address0,
        filter_buff_1_0_2_ce0,
        filter_buff_1_0_2_q0,
        filter_buff_1_1_0_address0,
        filter_buff_1_1_0_ce0,
        filter_buff_1_1_0_q0,
        filter_buff_1_1_1_address0,
        filter_buff_1_1_1_ce0,
        filter_buff_1_1_1_q0,
        filter_buff_1_1_2_address0,
        filter_buff_1_1_2_ce0,
        filter_buff_1_1_2_q0,
        filter_buff_1_2_0_address0,
        filter_buff_1_2_0_ce0,
        filter_buff_1_2_0_q0,
        filter_buff_1_2_1_address0,
        filter_buff_1_2_1_ce0,
        filter_buff_1_2_1_q0,
        filter_buff_1_2_2_address0,
        filter_buff_1_2_2_ce0,
        filter_buff_1_2_2_q0,
        filter_buff_2_0_0_address0,
        filter_buff_2_0_0_ce0,
        filter_buff_2_0_0_q0,
        filter_buff_2_0_1_address0,
        filter_buff_2_0_1_ce0,
        filter_buff_2_0_1_q0,
        filter_buff_2_0_2_address0,
        filter_buff_2_0_2_ce0,
        filter_buff_2_0_2_q0,
        filter_buff_2_1_0_address0,
        filter_buff_2_1_0_ce0,
        filter_buff_2_1_0_q0,
        filter_buff_2_1_1_address0,
        filter_buff_2_1_1_ce0,
        filter_buff_2_1_1_q0,
        filter_buff_2_1_2_address0,
        filter_buff_2_1_2_ce0,
        filter_buff_2_1_2_q0,
        filter_buff_2_2_0_address0,
        filter_buff_2_2_0_ce0,
        filter_buff_2_2_0_q0,
        filter_buff_2_2_1_address0,
        filter_buff_2_2_1_ce0,
        filter_buff_2_2_1_q0,
        filter_buff_2_2_2_address0,
        filter_buff_2_2_2_ce0,
        filter_buff_2_2_2_q0,
        ifm_buff0_0_address0,
        ifm_buff0_0_ce0,
        ifm_buff0_0_q0,
        ifm_buff0_0_address1,
        ifm_buff0_0_ce1,
        ifm_buff0_0_q1,
        ifm_buff0_1_address0,
        ifm_buff0_1_ce0,
        ifm_buff0_1_q0,
        ifm_buff0_1_address1,
        ifm_buff0_1_ce1,
        ifm_buff0_1_q1,
        ifm_buff0_2_address0,
        ifm_buff0_2_ce0,
        ifm_buff0_2_q0,
        ifm_buff0_2_address1,
        ifm_buff0_2_ce1,
        ifm_buff0_2_q1,
        ifm_buff1_0_address0,
        ifm_buff1_0_ce0,
        ifm_buff1_0_q0,
        ifm_buff1_0_address1,
        ifm_buff1_0_ce1,
        ifm_buff1_0_q1,
        ifm_buff1_1_address0,
        ifm_buff1_1_ce0,
        ifm_buff1_1_q0,
        ifm_buff1_1_address1,
        ifm_buff1_1_ce1,
        ifm_buff1_1_q1,
        ifm_buff1_2_address0,
        ifm_buff1_2_ce0,
        ifm_buff1_2_q0,
        ifm_buff1_2_address1,
        ifm_buff1_2_ce1,
        ifm_buff1_2_q1,
        ifm_buff2_0_address0,
        ifm_buff2_0_ce0,
        ifm_buff2_0_q0,
        ifm_buff2_0_address1,
        ifm_buff2_0_ce1,
        ifm_buff2_0_q1,
        ifm_buff2_1_address0,
        ifm_buff2_1_ce0,
        ifm_buff2_1_q0,
        ifm_buff2_1_address1,
        ifm_buff2_1_ce1,
        ifm_buff2_1_q1,
        ifm_buff2_2_address0,
        ifm_buff2_2_ce0,
        ifm_buff2_2_q0,
        ifm_buff2_2_address1,
        ifm_buff2_2_ce1,
        ifm_buff2_2_q1,
        ofm_buff0_0_address0,
        ofm_buff0_0_ce0,
        ofm_buff0_0_we0,
        ofm_buff0_0_d0,
        ofm_buff0_1_address0,
        ofm_buff0_1_ce0,
        ofm_buff0_1_we0,
        ofm_buff0_1_d0,
        ofm_buff0_2_address0,
        ofm_buff0_2_ce0,
        ofm_buff0_2_we0,
        ofm_buff0_2_d0,
        ofm_buff0_3_address0,
        ofm_buff0_3_ce0,
        ofm_buff0_3_we0,
        ofm_buff0_3_d0,
        ofm_buff0_4_address0,
        ofm_buff0_4_ce0,
        ofm_buff0_4_we0,
        ofm_buff0_4_d0,
        ofm_buff0_5_address0,
        ofm_buff0_5_ce0,
        ofm_buff0_5_we0,
        ofm_buff0_5_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_pp0_stage1 = 8'd8;
parameter    ap_ST_fsm_pp0_stage2 = 8'd16;
parameter    ap_ST_fsm_pp0_stage3 = 8'd32;
parameter    ap_ST_fsm_pp0_stage4 = 8'd64;
parameter    ap_ST_fsm_state39 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] filter_buff_0_0_0_address0;
output   filter_buff_0_0_0_ce0;
input  [31:0] filter_buff_0_0_0_q0;
output  [2:0] filter_buff_0_0_1_address0;
output   filter_buff_0_0_1_ce0;
input  [31:0] filter_buff_0_0_1_q0;
output  [2:0] filter_buff_0_0_2_address0;
output   filter_buff_0_0_2_ce0;
input  [31:0] filter_buff_0_0_2_q0;
output  [2:0] filter_buff_0_1_0_address0;
output   filter_buff_0_1_0_ce0;
input  [31:0] filter_buff_0_1_0_q0;
output  [2:0] filter_buff_0_1_1_address0;
output   filter_buff_0_1_1_ce0;
input  [31:0] filter_buff_0_1_1_q0;
output  [2:0] filter_buff_0_1_2_address0;
output   filter_buff_0_1_2_ce0;
input  [31:0] filter_buff_0_1_2_q0;
output  [2:0] filter_buff_0_2_0_address0;
output   filter_buff_0_2_0_ce0;
input  [31:0] filter_buff_0_2_0_q0;
output  [2:0] filter_buff_0_2_1_address0;
output   filter_buff_0_2_1_ce0;
input  [31:0] filter_buff_0_2_1_q0;
output  [2:0] filter_buff_0_2_2_address0;
output   filter_buff_0_2_2_ce0;
input  [31:0] filter_buff_0_2_2_q0;
output  [2:0] filter_buff_1_0_0_address0;
output   filter_buff_1_0_0_ce0;
input  [31:0] filter_buff_1_0_0_q0;
output  [2:0] filter_buff_1_0_1_address0;
output   filter_buff_1_0_1_ce0;
input  [31:0] filter_buff_1_0_1_q0;
output  [2:0] filter_buff_1_0_2_address0;
output   filter_buff_1_0_2_ce0;
input  [31:0] filter_buff_1_0_2_q0;
output  [2:0] filter_buff_1_1_0_address0;
output   filter_buff_1_1_0_ce0;
input  [31:0] filter_buff_1_1_0_q0;
output  [2:0] filter_buff_1_1_1_address0;
output   filter_buff_1_1_1_ce0;
input  [31:0] filter_buff_1_1_1_q0;
output  [2:0] filter_buff_1_1_2_address0;
output   filter_buff_1_1_2_ce0;
input  [31:0] filter_buff_1_1_2_q0;
output  [2:0] filter_buff_1_2_0_address0;
output   filter_buff_1_2_0_ce0;
input  [31:0] filter_buff_1_2_0_q0;
output  [2:0] filter_buff_1_2_1_address0;
output   filter_buff_1_2_1_ce0;
input  [31:0] filter_buff_1_2_1_q0;
output  [2:0] filter_buff_1_2_2_address0;
output   filter_buff_1_2_2_ce0;
input  [31:0] filter_buff_1_2_2_q0;
output  [2:0] filter_buff_2_0_0_address0;
output   filter_buff_2_0_0_ce0;
input  [31:0] filter_buff_2_0_0_q0;
output  [2:0] filter_buff_2_0_1_address0;
output   filter_buff_2_0_1_ce0;
input  [31:0] filter_buff_2_0_1_q0;
output  [2:0] filter_buff_2_0_2_address0;
output   filter_buff_2_0_2_ce0;
input  [31:0] filter_buff_2_0_2_q0;
output  [2:0] filter_buff_2_1_0_address0;
output   filter_buff_2_1_0_ce0;
input  [31:0] filter_buff_2_1_0_q0;
output  [2:0] filter_buff_2_1_1_address0;
output   filter_buff_2_1_1_ce0;
input  [31:0] filter_buff_2_1_1_q0;
output  [2:0] filter_buff_2_1_2_address0;
output   filter_buff_2_1_2_ce0;
input  [31:0] filter_buff_2_1_2_q0;
output  [2:0] filter_buff_2_2_0_address0;
output   filter_buff_2_2_0_ce0;
input  [31:0] filter_buff_2_2_0_q0;
output  [2:0] filter_buff_2_2_1_address0;
output   filter_buff_2_2_1_ce0;
input  [31:0] filter_buff_2_2_1_q0;
output  [2:0] filter_buff_2_2_2_address0;
output   filter_buff_2_2_2_ce0;
input  [31:0] filter_buff_2_2_2_q0;
output  [5:0] ifm_buff0_0_address0;
output   ifm_buff0_0_ce0;
input  [31:0] ifm_buff0_0_q0;
output  [5:0] ifm_buff0_0_address1;
output   ifm_buff0_0_ce1;
input  [31:0] ifm_buff0_0_q1;
output  [5:0] ifm_buff0_1_address0;
output   ifm_buff0_1_ce0;
input  [31:0] ifm_buff0_1_q0;
output  [5:0] ifm_buff0_1_address1;
output   ifm_buff0_1_ce1;
input  [31:0] ifm_buff0_1_q1;
output  [5:0] ifm_buff0_2_address0;
output   ifm_buff0_2_ce0;
input  [31:0] ifm_buff0_2_q0;
output  [5:0] ifm_buff0_2_address1;
output   ifm_buff0_2_ce1;
input  [31:0] ifm_buff0_2_q1;
output  [5:0] ifm_buff1_0_address0;
output   ifm_buff1_0_ce0;
input  [31:0] ifm_buff1_0_q0;
output  [5:0] ifm_buff1_0_address1;
output   ifm_buff1_0_ce1;
input  [31:0] ifm_buff1_0_q1;
output  [5:0] ifm_buff1_1_address0;
output   ifm_buff1_1_ce0;
input  [31:0] ifm_buff1_1_q0;
output  [5:0] ifm_buff1_1_address1;
output   ifm_buff1_1_ce1;
input  [31:0] ifm_buff1_1_q1;
output  [5:0] ifm_buff1_2_address0;
output   ifm_buff1_2_ce0;
input  [31:0] ifm_buff1_2_q0;
output  [5:0] ifm_buff1_2_address1;
output   ifm_buff1_2_ce1;
input  [31:0] ifm_buff1_2_q1;
output  [5:0] ifm_buff2_0_address0;
output   ifm_buff2_0_ce0;
input  [31:0] ifm_buff2_0_q0;
output  [5:0] ifm_buff2_0_address1;
output   ifm_buff2_0_ce1;
input  [31:0] ifm_buff2_0_q1;
output  [5:0] ifm_buff2_1_address0;
output   ifm_buff2_1_ce0;
input  [31:0] ifm_buff2_1_q0;
output  [5:0] ifm_buff2_1_address1;
output   ifm_buff2_1_ce1;
input  [31:0] ifm_buff2_1_q1;
output  [5:0] ifm_buff2_2_address0;
output   ifm_buff2_2_ce0;
input  [31:0] ifm_buff2_2_q0;
output  [5:0] ifm_buff2_2_address1;
output   ifm_buff2_2_ce1;
input  [31:0] ifm_buff2_2_q1;
output  [4:0] ofm_buff0_0_address0;
output   ofm_buff0_0_ce0;
output   ofm_buff0_0_we0;
output  [31:0] ofm_buff0_0_d0;
output  [4:0] ofm_buff0_1_address0;
output   ofm_buff0_1_ce0;
output   ofm_buff0_1_we0;
output  [31:0] ofm_buff0_1_d0;
output  [4:0] ofm_buff0_2_address0;
output   ofm_buff0_2_ce0;
output   ofm_buff0_2_we0;
output  [31:0] ofm_buff0_2_d0;
output  [4:0] ofm_buff0_3_address0;
output   ofm_buff0_3_ce0;
output   ofm_buff0_3_we0;
output  [31:0] ofm_buff0_3_d0;
output  [4:0] ofm_buff0_4_address0;
output   ofm_buff0_4_ce0;
output   ofm_buff0_4_we0;
output  [31:0] ofm_buff0_4_d0;
output  [4:0] ofm_buff0_5_address0;
output   ofm_buff0_5_ce0;
output   ofm_buff0_5_we0;
output  [31:0] ofm_buff0_5_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg filter_buff_0_0_0_ce0;
reg filter_buff_0_0_1_ce0;
reg filter_buff_0_0_2_ce0;
reg filter_buff_0_1_0_ce0;
reg filter_buff_0_1_1_ce0;
reg filter_buff_0_1_2_ce0;
reg filter_buff_0_2_0_ce0;
reg filter_buff_0_2_1_ce0;
reg filter_buff_0_2_2_ce0;
reg filter_buff_1_0_0_ce0;
reg filter_buff_1_0_1_ce0;
reg filter_buff_1_0_2_ce0;
reg filter_buff_1_1_0_ce0;
reg filter_buff_1_1_1_ce0;
reg filter_buff_1_1_2_ce0;
reg filter_buff_1_2_0_ce0;
reg filter_buff_1_2_1_ce0;
reg filter_buff_1_2_2_ce0;
reg filter_buff_2_0_0_ce0;
reg filter_buff_2_0_1_ce0;
reg filter_buff_2_0_2_ce0;
reg filter_buff_2_1_0_ce0;
reg filter_buff_2_1_1_ce0;
reg filter_buff_2_1_2_ce0;
reg filter_buff_2_2_0_ce0;
reg filter_buff_2_2_1_ce0;
reg filter_buff_2_2_2_ce0;
reg[5:0] ifm_buff0_0_address0;
reg ifm_buff0_0_ce0;
reg ifm_buff0_0_ce1;
reg[5:0] ifm_buff0_1_address0;
reg ifm_buff0_1_ce0;
reg ifm_buff0_1_ce1;
reg[5:0] ifm_buff0_2_address0;
reg ifm_buff0_2_ce0;
reg ifm_buff0_2_ce1;
reg[5:0] ifm_buff1_0_address0;
reg ifm_buff1_0_ce0;
reg ifm_buff1_0_ce1;
reg[5:0] ifm_buff1_1_address0;
reg ifm_buff1_1_ce0;
reg ifm_buff1_1_ce1;
reg[5:0] ifm_buff1_2_address0;
reg ifm_buff1_2_ce0;
reg ifm_buff1_2_ce1;
reg[5:0] ifm_buff2_0_address0;
reg ifm_buff2_0_ce0;
reg ifm_buff2_0_ce1;
reg[5:0] ifm_buff2_1_address0;
reg ifm_buff2_1_ce0;
reg ifm_buff2_1_ce1;
reg[5:0] ifm_buff2_2_address0;
reg ifm_buff2_2_ce0;
reg ifm_buff2_2_ce1;
reg ofm_buff0_0_ce0;
reg ofm_buff0_0_we0;
reg ofm_buff0_1_ce0;
reg ofm_buff0_1_we0;
reg ofm_buff0_2_ce0;
reg ofm_buff0_2_we0;
reg ofm_buff0_3_ce0;
reg ofm_buff0_3_we0;
reg ofm_buff0_4_ce0;
reg ofm_buff0_4_we0;
reg ofm_buff0_5_ce0;
reg ofm_buff0_5_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] Y_0_reg_851;
reg   [1:0] to_0_reg_869;
wire   [0:0] icmp_ln136_fu_940_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln136_fu_946_p2;
reg   [7:0] add_ln136_reg_1237;
wire   [2:0] select_ln173_fu_958_p3;
reg   [2:0] select_ln173_reg_1242;
wire   [5:0] select_ln173_1_fu_966_p3;
reg   [5:0] select_ln173_1_reg_1247;
wire   [63:0] zext_ln173_fu_974_p1;
reg   [63:0] zext_ln173_reg_1252;
reg   [2:0] filter_buff_0_0_0_3_reg_1262;
reg   [2:0] filter_buff_1_0_0_3_reg_1267;
reg   [2:0] filter_buff_2_0_0_3_reg_1272;
reg   [2:0] filter_buff_0_1_0_3_reg_1277;
reg   [2:0] filter_buff_1_1_0_3_reg_1282;
reg   [2:0] filter_buff_2_1_0_3_reg_1287;
reg   [2:0] filter_buff_0_2_0_3_reg_1292;
reg   [2:0] filter_buff_1_2_0_3_reg_1297;
reg   [2:0] filter_buff_2_2_0_3_reg_1302;
reg   [2:0] filter_buff_0_0_1_3_reg_1307;
reg   [2:0] filter_buff_1_0_1_3_reg_1312;
reg   [2:0] filter_buff_2_0_1_3_reg_1317;
reg   [2:0] filter_buff_0_1_1_3_reg_1322;
reg   [2:0] filter_buff_1_1_1_3_reg_1327;
reg   [2:0] filter_buff_2_1_1_3_reg_1332;
reg   [2:0] filter_buff_0_2_1_3_reg_1337;
reg   [2:0] filter_buff_1_2_1_3_reg_1342;
reg   [2:0] filter_buff_2_2_1_3_reg_1347;
reg   [2:0] filter_buff_0_0_2_3_reg_1352;
reg   [2:0] filter_buff_1_0_2_3_reg_1357;
reg   [2:0] filter_buff_2_0_2_3_reg_1362;
reg   [2:0] filter_buff_0_1_2_3_reg_1367;
reg   [2:0] filter_buff_1_1_2_3_reg_1372;
reg   [2:0] filter_buff_2_1_2_3_reg_1377;
reg   [2:0] filter_buff_0_2_2_3_reg_1382;
reg   [2:0] filter_buff_1_2_2_3_reg_1387;
reg   [2:0] filter_buff_2_2_2_3_reg_1392;
reg   [5:0] ifm_buff0_0_addr_reg_1397;
reg   [5:0] ifm_buff0_1_addr_reg_1402;
reg   [5:0] ifm_buff0_2_addr_reg_1407;
reg   [5:0] ifm_buff1_0_addr_reg_1412;
reg   [5:0] ifm_buff1_1_addr_reg_1417;
reg   [5:0] ifm_buff1_2_addr_reg_1422;
reg   [5:0] ifm_buff2_0_addr_reg_1427;
reg   [5:0] ifm_buff2_1_addr_reg_1432;
reg   [5:0] ifm_buff2_2_addr_reg_1437;
reg   [5:0] ifm_buff0_0_addr_1_reg_1442;
reg   [5:0] ifm_buff0_1_addr_1_reg_1447;
reg   [5:0] ifm_buff0_2_addr_1_reg_1452;
reg   [5:0] ifm_buff1_0_addr_1_reg_1457;
reg   [5:0] ifm_buff1_1_addr_1_reg_1462;
reg   [5:0] ifm_buff1_2_addr_1_reg_1467;
reg   [5:0] ifm_buff2_0_addr_1_reg_1472;
reg   [5:0] ifm_buff2_1_addr_1_reg_1477;
reg   [5:0] ifm_buff2_2_addr_1_reg_1482;
reg   [5:0] ifm_buff0_0_addr_2_reg_1487;
reg   [5:0] ifm_buff0_1_addr_2_reg_1492;
reg   [5:0] ifm_buff0_2_addr_2_reg_1497;
reg   [5:0] ifm_buff1_0_addr_2_reg_1502;
reg   [5:0] ifm_buff1_1_addr_2_reg_1507;
reg   [5:0] ifm_buff1_2_addr_2_reg_1512;
reg   [5:0] ifm_buff2_0_addr_2_reg_1517;
reg   [5:0] ifm_buff2_1_addr_2_reg_1522;
reg   [5:0] ifm_buff2_2_addr_2_reg_1527;
wire   [0:0] icmp_ln163_fu_1072_p2;
reg   [0:0] icmp_ln163_reg_1532;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state18_pp0_stage0_iter3;
wire    ap_block_state23_pp0_stage0_iter4;
wire    ap_block_state28_pp0_stage0_iter5;
wire    ap_block_state33_pp0_stage0_iter6;
wire    ap_block_state38_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter1_reg;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter2_reg;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter3_reg;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter4_reg;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter5_reg;
reg   [0:0] icmp_ln163_reg_1532_pp0_iter6_reg;
wire   [1:0] to_fu_1078_p2;
reg   [1:0] to_reg_1536;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] grp_fu_898_p5;
reg   [31:0] tmp_1_reg_1541;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state19_pp0_stage1_iter3;
wire    ap_block_state24_pp0_stage1_iter4;
wire    ap_block_state29_pp0_stage1_iter5;
wire    ap_block_state34_pp0_stage1_iter6;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_2_fu_1084_p5;
reg   [31:0] tmp_2_reg_1546;
wire   [31:0] grp_fu_910_p5;
reg   [31:0] tmp_6_reg_1551;
wire   [31:0] tmp_7_fu_1096_p5;
reg   [31:0] tmp_7_reg_1556;
wire   [31:0] grp_fu_922_p5;
reg   [31:0] tmp_8_reg_1561;
wire   [31:0] tmp_9_fu_1108_p5;
reg   [31:0] tmp_9_reg_1566;
wire   [31:0] tmp_s_fu_1120_p5;
reg   [31:0] tmp_s_reg_1571;
wire   [31:0] tmp_3_fu_1132_p5;
reg   [31:0] tmp_3_reg_1576;
wire   [31:0] tmp_10_fu_1144_p5;
reg   [31:0] tmp_10_reg_1581;
wire   [31:0] tmp_11_fu_1156_p5;
reg   [31:0] tmp_11_reg_1586;
wire   [31:0] tmp_12_fu_1168_p5;
reg   [31:0] tmp_12_reg_1591;
wire   [31:0] tmp_13_fu_1180_p5;
reg   [31:0] tmp_13_reg_1596;
wire   [31:0] tmp_15_fu_1192_p5;
reg   [31:0] tmp_15_reg_1601;
wire   [31:0] tmp_17_fu_1204_p5;
reg   [31:0] tmp_17_reg_1606;
wire   [31:0] tmp_19_fu_1216_p5;
reg   [31:0] tmp_19_reg_1611;
reg   [31:0] tmp_14_reg_1616;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state20_pp0_stage2_iter3;
wire    ap_block_state25_pp0_stage2_iter4;
wire    ap_block_state30_pp0_stage2_iter5;
wire    ap_block_state35_pp0_stage2_iter6;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] tmp_16_reg_1621;
reg   [31:0] tmp_18_reg_1626;
wire   [31:0] grp_fu_890_p2;
reg   [31:0] mut000_reg_1631;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_894_p2;
reg   [31:0] mut100_reg_1636;
reg   [31:0] mut200_reg_1641;
reg   [31:0] mut010_reg_1646;
reg   [31:0] mut110_reg_1651;
reg   [31:0] mut210_reg_1656;
reg   [31:0] mut020_reg_1661;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state21_pp0_stage3_iter3;
wire    ap_block_state26_pp0_stage3_iter4;
wire    ap_block_state31_pp0_stage3_iter5;
wire    ap_block_state36_pp0_stage3_iter6;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] mut120_reg_1666;
reg   [31:0] mut220_reg_1671;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state22_pp0_stage4_iter3;
wire    ap_block_state27_pp0_stage4_iter4;
wire    ap_block_state32_pp0_stage4_iter5;
wire    ap_block_state37_pp0_stage4_iter6;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] mut220_reg_1671_pp0_iter2_reg;
reg   [31:0] mut220_reg_1671_pp0_iter3_reg;
reg   [31:0] mut220_reg_1671_pp0_iter4_reg;
wire   [31:0] grp_fu_881_p2;
reg   [31:0] acc000_reg_1676;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] acc010_reg_1681;
reg   [31:0] acc020_reg_1686;
reg   [31:0] acc030_reg_1691;
wire   [31:0] grp_fu_885_p2;
reg   [31:0] acc040_reg_1696;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] acc050_reg_1701;
reg   [31:0] acc060_reg_1706;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] tmp_reg_1711;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
wire   [2:0] ti_fu_1228_p2;
wire    ap_CS_fsm_state39;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter6;
reg   [7:0] indvar_flatten_reg_818;
reg   [5:0] col_0_reg_829;
reg   [2:0] ti_0_reg_840;
reg   [1:0] ap_phi_mux_to_0_phi_fu_873_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln173_1_fu_1041_p1;
wire   [63:0] zext_ln173_3_fu_1001_p1;
wire   [63:0] zext_ln173_2_fu_1028_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_881_p0;
reg   [31:0] grp_fu_881_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_885_p0;
reg   [31:0] grp_fu_885_p1;
reg   [31:0] grp_fu_890_p0;
reg   [31:0] grp_fu_890_p1;
reg   [31:0] grp_fu_894_p0;
reg   [31:0] grp_fu_894_p1;
wire   [0:0] icmp_ln139_fu_952_p2;
wire   [5:0] col_fu_934_p2;
wire   [5:0] add_ln176_fu_987_p2;
wire   [5:0] select_ln173_2_fu_993_p3;
wire   [5:0] select_ln173_3_fu_1014_p3;
wire   [5:0] add_ln173_fu_1022_p2;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

convolution_hw_fabkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_hw_fabkb_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_881_p0),
    .din1(grp_fu_881_p1),
    .ce(1'b1),
    .dout(grp_fu_881_p2)
);

convolution_hw_fabkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_hw_fabkb_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_885_p0),
    .din1(grp_fu_885_p1),
    .ce(1'b1),
    .dout(grp_fu_885_p2)
);

convolution_hw_fmcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_hw_fmcud_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_890_p0),
    .din1(grp_fu_890_p1),
    .ce(1'b1),
    .dout(grp_fu_890_p2)
);

convolution_hw_fmcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_hw_fmcud_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_894_p0),
    .din1(grp_fu_894_p1),
    .ce(1'b1),
    .dout(grp_fu_894_p2)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U49(
    .din0(ifm_buff0_0_q0),
    .din1(ifm_buff0_1_q0),
    .din2(ifm_buff0_2_q0),
    .din3(to_0_reg_869),
    .dout(grp_fu_898_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U50(
    .din0(ifm_buff1_0_q0),
    .din1(ifm_buff1_1_q0),
    .din2(ifm_buff1_2_q0),
    .din3(to_0_reg_869),
    .dout(grp_fu_910_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U51(
    .din0(ifm_buff2_0_q0),
    .din1(ifm_buff2_1_q0),
    .din2(ifm_buff2_2_q0),
    .din3(to_0_reg_869),
    .dout(grp_fu_922_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U52(
    .din0(filter_buff_0_0_0_q0),
    .din1(filter_buff_1_0_0_q0),
    .din2(filter_buff_2_0_0_q0),
    .din3(to_0_reg_869),
    .dout(tmp_2_fu_1084_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U53(
    .din0(filter_buff_0_1_0_q0),
    .din1(filter_buff_1_1_0_q0),
    .din2(filter_buff_2_1_0_q0),
    .din3(to_0_reg_869),
    .dout(tmp_7_fu_1096_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U54(
    .din0(filter_buff_0_2_0_q0),
    .din1(filter_buff_1_2_0_q0),
    .din2(filter_buff_2_2_0_q0),
    .din3(to_0_reg_869),
    .dout(tmp_9_fu_1108_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U55(
    .din0(ifm_buff0_0_q1),
    .din1(ifm_buff0_1_q1),
    .din2(ifm_buff0_2_q1),
    .din3(to_0_reg_869),
    .dout(tmp_s_fu_1120_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U56(
    .din0(filter_buff_0_0_1_q0),
    .din1(filter_buff_1_0_1_q0),
    .din2(filter_buff_2_0_1_q0),
    .din3(to_0_reg_869),
    .dout(tmp_3_fu_1132_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U57(
    .din0(ifm_buff1_0_q1),
    .din1(ifm_buff1_1_q1),
    .din2(ifm_buff1_2_q1),
    .din3(to_0_reg_869),
    .dout(tmp_10_fu_1144_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U58(
    .din0(filter_buff_0_1_1_q0),
    .din1(filter_buff_1_1_1_q0),
    .din2(filter_buff_2_1_1_q0),
    .din3(to_0_reg_869),
    .dout(tmp_11_fu_1156_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U59(
    .din0(ifm_buff2_0_q1),
    .din1(ifm_buff2_1_q1),
    .din2(ifm_buff2_2_q1),
    .din3(to_0_reg_869),
    .dout(tmp_12_fu_1168_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U60(
    .din0(filter_buff_0_2_1_q0),
    .din1(filter_buff_1_2_1_q0),
    .din2(filter_buff_2_2_1_q0),
    .din3(to_0_reg_869),
    .dout(tmp_13_fu_1180_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U61(
    .din0(filter_buff_0_0_2_q0),
    .din1(filter_buff_1_0_2_q0),
    .din2(filter_buff_2_0_2_q0),
    .din3(to_0_reg_869),
    .dout(tmp_15_fu_1192_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U62(
    .din0(filter_buff_0_1_2_q0),
    .din1(filter_buff_1_1_2_q0),
    .din2(filter_buff_2_1_2_q0),
    .din3(to_0_reg_869),
    .dout(tmp_17_fu_1204_p5)
);

convolution_hw_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
convolution_hw_mudEe_U63(
    .din0(filter_buff_0_2_2_q0),
    .din1(filter_buff_1_2_2_q0),
    .din2(filter_buff_2_2_2_q0),
    .din3(to_0_reg_869),
    .dout(tmp_19_fu_1216_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln136_fu_940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln136_fu_940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1532_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_0_reg_851 <= grp_fu_885_p2;
    end else if (((icmp_ln136_fu_940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Y_0_reg_851 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        col_0_reg_829 <= select_ln173_1_reg_1247;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_0_reg_829 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        indvar_flatten_reg_818 <= add_ln136_reg_1237;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_818 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ti_0_reg_840 <= ti_fu_1228_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ti_0_reg_840 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1532 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        to_0_reg_869 <= to_reg_1536;
    end else if (((icmp_ln136_fu_940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        to_0_reg_869 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1532_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc000_reg_1676 <= grp_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln163_reg_1532_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        acc010_reg_1681 <= grp_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln163_reg_1532_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc020_reg_1686 <= grp_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln163_reg_1532_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        acc030_reg_1691 <= grp_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln163_reg_1532_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        acc040_reg_1696 <= grp_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln163_reg_1532_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        acc050_reg_1701 <= grp_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln163_reg_1532_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        acc060_reg_1706 <= grp_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln136_reg_1237 <= add_ln136_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln136_fu_940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        filter_buff_0_0_0_3_reg_1262 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_0_1_3_reg_1307 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_0_2_3_reg_1352 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_1_0_3_reg_1277 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_1_1_3_reg_1322 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_1_2_3_reg_1367 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_2_0_3_reg_1292 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_2_1_3_reg_1337 <= zext_ln173_1_fu_1041_p1;
        filter_buff_0_2_2_3_reg_1382 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_0_0_3_reg_1267 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_0_1_3_reg_1312 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_0_2_3_reg_1357 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_1_0_3_reg_1282 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_1_1_3_reg_1327 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_1_2_3_reg_1372 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_2_0_3_reg_1297 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_2_1_3_reg_1342 <= zext_ln173_1_fu_1041_p1;
        filter_buff_1_2_2_3_reg_1387 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_0_0_3_reg_1272 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_0_1_3_reg_1317 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_0_2_3_reg_1362 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_1_0_3_reg_1287 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_1_1_3_reg_1332 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_1_2_3_reg_1377 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_2_0_3_reg_1302 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_2_1_3_reg_1347 <= zext_ln173_1_fu_1041_p1;
        filter_buff_2_2_2_3_reg_1392 <= zext_ln173_1_fu_1041_p1;
        ifm_buff0_0_addr_1_reg_1442 <= zext_ln173_3_fu_1001_p1;
        ifm_buff0_0_addr_2_reg_1487 <= zext_ln173_2_fu_1028_p1;
        ifm_buff0_0_addr_reg_1397 <= zext_ln173_fu_974_p1;
        ifm_buff0_1_addr_1_reg_1447 <= zext_ln173_3_fu_1001_p1;
        ifm_buff0_1_addr_2_reg_1492 <= zext_ln173_2_fu_1028_p1;
        ifm_buff0_1_addr_reg_1402 <= zext_ln173_fu_974_p1;
        ifm_buff0_2_addr_1_reg_1452 <= zext_ln173_3_fu_1001_p1;
        ifm_buff0_2_addr_2_reg_1497 <= zext_ln173_2_fu_1028_p1;
        ifm_buff0_2_addr_reg_1407 <= zext_ln173_fu_974_p1;
        ifm_buff1_0_addr_1_reg_1457 <= zext_ln173_3_fu_1001_p1;
        ifm_buff1_0_addr_2_reg_1502 <= zext_ln173_2_fu_1028_p1;
        ifm_buff1_0_addr_reg_1412 <= zext_ln173_fu_974_p1;
        ifm_buff1_1_addr_1_reg_1462 <= zext_ln173_3_fu_1001_p1;
        ifm_buff1_1_addr_2_reg_1507 <= zext_ln173_2_fu_1028_p1;
        ifm_buff1_1_addr_reg_1417 <= zext_ln173_fu_974_p1;
        ifm_buff1_2_addr_1_reg_1467 <= zext_ln173_3_fu_1001_p1;
        ifm_buff1_2_addr_2_reg_1512 <= zext_ln173_2_fu_1028_p1;
        ifm_buff1_2_addr_reg_1422 <= zext_ln173_fu_974_p1;
        ifm_buff2_0_addr_1_reg_1472 <= zext_ln173_3_fu_1001_p1;
        ifm_buff2_0_addr_2_reg_1517 <= zext_ln173_2_fu_1028_p1;
        ifm_buff2_0_addr_reg_1427 <= zext_ln173_fu_974_p1;
        ifm_buff2_1_addr_1_reg_1477 <= zext_ln173_3_fu_1001_p1;
        ifm_buff2_1_addr_2_reg_1522 <= zext_ln173_2_fu_1028_p1;
        ifm_buff2_1_addr_reg_1432 <= zext_ln173_fu_974_p1;
        ifm_buff2_2_addr_1_reg_1482 <= zext_ln173_3_fu_1001_p1;
        ifm_buff2_2_addr_2_reg_1527 <= zext_ln173_2_fu_1028_p1;
        ifm_buff2_2_addr_reg_1437 <= zext_ln173_fu_974_p1;
        select_ln173_1_reg_1247 <= select_ln173_1_fu_966_p3;
        select_ln173_reg_1242 <= select_ln173_fu_958_p3;
        zext_ln173_reg_1252[5 : 0] <= zext_ln173_fu_974_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln163_reg_1532 <= icmp_ln163_fu_1072_p2;
        icmp_ln163_reg_1532_pp0_iter1_reg <= icmp_ln163_reg_1532;
        icmp_ln163_reg_1532_pp0_iter2_reg <= icmp_ln163_reg_1532_pp0_iter1_reg;
        icmp_ln163_reg_1532_pp0_iter3_reg <= icmp_ln163_reg_1532_pp0_iter2_reg;
        icmp_ln163_reg_1532_pp0_iter4_reg <= icmp_ln163_reg_1532_pp0_iter3_reg;
        icmp_ln163_reg_1532_pp0_iter5_reg <= icmp_ln163_reg_1532_pp0_iter4_reg;
        icmp_ln163_reg_1532_pp0_iter6_reg <= icmp_ln163_reg_1532_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1532 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mut000_reg_1631 <= grp_fu_890_p2;
        mut100_reg_1636 <= grp_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln163_reg_1532_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mut010_reg_1646 <= grp_fu_894_p2;
        mut200_reg_1641 <= grp_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln163_reg_1532_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mut020_reg_1661 <= grp_fu_890_p2;
        mut120_reg_1666 <= grp_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln163_reg_1532_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mut110_reg_1651 <= grp_fu_890_p2;
        mut210_reg_1656 <= grp_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln163_reg_1532_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mut220_reg_1671 <= grp_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mut220_reg_1671_pp0_iter2_reg <= mut220_reg_1671;
        mut220_reg_1671_pp0_iter3_reg <= mut220_reg_1671_pp0_iter2_reg;
        mut220_reg_1671_pp0_iter4_reg <= mut220_reg_1671_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln163_reg_1532 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_10_reg_1581 <= tmp_10_fu_1144_p5;
        tmp_11_reg_1586 <= tmp_11_fu_1156_p5;
        tmp_12_reg_1591 <= tmp_12_fu_1168_p5;
        tmp_13_reg_1596 <= tmp_13_fu_1180_p5;
        tmp_15_reg_1601 <= tmp_15_fu_1192_p5;
        tmp_17_reg_1606 <= tmp_17_fu_1204_p5;
        tmp_19_reg_1611 <= tmp_19_fu_1216_p5;
        tmp_2_reg_1546 <= tmp_2_fu_1084_p5;
        tmp_3_reg_1576 <= tmp_3_fu_1132_p5;
        tmp_7_reg_1556 <= tmp_7_fu_1096_p5;
        tmp_9_reg_1566 <= tmp_9_fu_1108_p5;
        tmp_s_reg_1571 <= tmp_s_fu_1120_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln163_reg_1532 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_14_reg_1616 <= grp_fu_898_p5;
        tmp_16_reg_1621 <= grp_fu_910_p5;
        tmp_18_reg_1626 <= grp_fu_922_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln163_reg_1532 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_reg_1541 <= grp_fu_898_p5;
        tmp_6_reg_1551 <= grp_fu_910_p5;
        tmp_8_reg_1561 <= grp_fu_922_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln163_reg_1532_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_reg_1711 <= grp_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        to_reg_1536 <= to_fu_1078_p2;
    end
end

always @ (*) begin
    if ((icmp_ln163_fu_1072_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln136_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln163_reg_1532 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_to_0_phi_fu_873_p4 = to_reg_1536;
    end else begin
        ap_phi_mux_to_0_phi_fu_873_p4 = to_0_reg_869;
    end
end

always @ (*) begin
    if (((icmp_ln136_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_0_0_ce0 = 1'b1;
    end else begin
        filter_buff_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_0_1_ce0 = 1'b1;
    end else begin
        filter_buff_0_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_0_2_ce0 = 1'b1;
    end else begin
        filter_buff_0_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_1_0_ce0 = 1'b1;
    end else begin
        filter_buff_0_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_1_1_ce0 = 1'b1;
    end else begin
        filter_buff_0_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_1_2_ce0 = 1'b1;
    end else begin
        filter_buff_0_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_2_0_ce0 = 1'b1;
    end else begin
        filter_buff_0_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_2_1_ce0 = 1'b1;
    end else begin
        filter_buff_0_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_0_2_2_ce0 = 1'b1;
    end else begin
        filter_buff_0_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_0_0_ce0 = 1'b1;
    end else begin
        filter_buff_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_0_1_ce0 = 1'b1;
    end else begin
        filter_buff_1_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_0_2_ce0 = 1'b1;
    end else begin
        filter_buff_1_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_1_0_ce0 = 1'b1;
    end else begin
        filter_buff_1_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_1_1_ce0 = 1'b1;
    end else begin
        filter_buff_1_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_1_2_ce0 = 1'b1;
    end else begin
        filter_buff_1_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_2_0_ce0 = 1'b1;
    end else begin
        filter_buff_1_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_2_1_ce0 = 1'b1;
    end else begin
        filter_buff_1_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_1_2_2_ce0 = 1'b1;
    end else begin
        filter_buff_1_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_0_0_ce0 = 1'b1;
    end else begin
        filter_buff_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_0_1_ce0 = 1'b1;
    end else begin
        filter_buff_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_0_2_ce0 = 1'b1;
    end else begin
        filter_buff_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_1_0_ce0 = 1'b1;
    end else begin
        filter_buff_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_1_1_ce0 = 1'b1;
    end else begin
        filter_buff_2_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_1_2_ce0 = 1'b1;
    end else begin
        filter_buff_2_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_2_0_ce0 = 1'b1;
    end else begin
        filter_buff_2_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_2_1_ce0 = 1'b1;
    end else begin
        filter_buff_2_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_buff_2_2_2_ce0 = 1'b1;
    end else begin
        filter_buff_2_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_881_p0 = acc040_reg_1696;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_881_p0 = mut020_reg_1661;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_881_p0 = mut110_reg_1651;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_881_p0 = mut200_reg_1641;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_881_p0 = mut000_reg_1631;
    end else begin
        grp_fu_881_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_881_p1 = acc050_reg_1701;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_881_p1 = mut120_reg_1666;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_881_p1 = mut210_reg_1656;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_881_p1 = mut010_reg_1646;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_881_p1 = mut100_reg_1636;
    end else begin
        grp_fu_881_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_885_p0 = Y_0_reg_851;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_885_p0 = acc060_reg_1706;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_885_p0 = acc020_reg_1686;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_885_p0 = acc000_reg_1676;
    end else begin
        grp_fu_885_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_885_p1 = tmp_reg_1711;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_885_p1 = mut220_reg_1671_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_885_p1 = acc030_reg_1691;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_885_p1 = acc010_reg_1681;
    end else begin
        grp_fu_885_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_890_p0 = tmp_18_reg_1626;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_890_p0 = tmp_14_reg_1616;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p0 = tmp_10_reg_1581;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p0 = tmp_8_reg_1561;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p0 = tmp_1_reg_1541;
    end else begin
        grp_fu_890_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_890_p1 = tmp_19_reg_1611;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_890_p1 = tmp_15_reg_1601;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p1 = tmp_11_reg_1586;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p1 = tmp_9_reg_1566;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_890_p1 = tmp_2_reg_1546;
    end else begin
        grp_fu_890_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_894_p0 = tmp_16_reg_1621;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p0 = tmp_12_reg_1591;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p0 = tmp_s_reg_1571;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p0 = tmp_6_reg_1551;
    end else begin
        grp_fu_894_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_894_p1 = tmp_17_reg_1606;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p1 = tmp_13_reg_1596;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p1 = tmp_3_reg_1576;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_894_p1 = tmp_7_reg_1556;
    end else begin
        grp_fu_894_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff0_0_address0 = ifm_buff0_0_addr_2_reg_1487;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff0_0_address0 = ifm_buff0_0_addr_reg_1397;
        end else begin
            ifm_buff0_0_address0 = 'bx;
        end
    end else begin
        ifm_buff0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff0_0_ce0 = 1'b1;
    end else begin
        ifm_buff0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff0_0_ce1 = 1'b1;
    end else begin
        ifm_buff0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff0_1_address0 = ifm_buff0_1_addr_2_reg_1492;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff0_1_address0 = ifm_buff0_1_addr_reg_1402;
        end else begin
            ifm_buff0_1_address0 = 'bx;
        end
    end else begin
        ifm_buff0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff0_1_ce0 = 1'b1;
    end else begin
        ifm_buff0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff0_1_ce1 = 1'b1;
    end else begin
        ifm_buff0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff0_2_address0 = ifm_buff0_2_addr_2_reg_1497;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff0_2_address0 = ifm_buff0_2_addr_reg_1407;
        end else begin
            ifm_buff0_2_address0 = 'bx;
        end
    end else begin
        ifm_buff0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff0_2_ce0 = 1'b1;
    end else begin
        ifm_buff0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff0_2_ce1 = 1'b1;
    end else begin
        ifm_buff0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff1_0_address0 = ifm_buff1_0_addr_2_reg_1502;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff1_0_address0 = ifm_buff1_0_addr_reg_1412;
        end else begin
            ifm_buff1_0_address0 = 'bx;
        end
    end else begin
        ifm_buff1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff1_0_ce0 = 1'b1;
    end else begin
        ifm_buff1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff1_0_ce1 = 1'b1;
    end else begin
        ifm_buff1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff1_1_address0 = ifm_buff1_1_addr_2_reg_1507;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff1_1_address0 = ifm_buff1_1_addr_reg_1417;
        end else begin
            ifm_buff1_1_address0 = 'bx;
        end
    end else begin
        ifm_buff1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff1_1_ce0 = 1'b1;
    end else begin
        ifm_buff1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff1_1_ce1 = 1'b1;
    end else begin
        ifm_buff1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff1_2_address0 = ifm_buff1_2_addr_2_reg_1512;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff1_2_address0 = ifm_buff1_2_addr_reg_1422;
        end else begin
            ifm_buff1_2_address0 = 'bx;
        end
    end else begin
        ifm_buff1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff1_2_ce0 = 1'b1;
    end else begin
        ifm_buff1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff1_2_ce1 = 1'b1;
    end else begin
        ifm_buff1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff2_0_address0 = ifm_buff2_0_addr_2_reg_1517;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff2_0_address0 = ifm_buff2_0_addr_reg_1427;
        end else begin
            ifm_buff2_0_address0 = 'bx;
        end
    end else begin
        ifm_buff2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff2_0_ce0 = 1'b1;
    end else begin
        ifm_buff2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff2_0_ce1 = 1'b1;
    end else begin
        ifm_buff2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff2_1_address0 = ifm_buff2_1_addr_2_reg_1522;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff2_1_address0 = ifm_buff2_1_addr_reg_1432;
        end else begin
            ifm_buff2_1_address0 = 'bx;
        end
    end else begin
        ifm_buff2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff2_1_ce0 = 1'b1;
    end else begin
        ifm_buff2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff2_1_ce1 = 1'b1;
    end else begin
        ifm_buff2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ifm_buff2_2_address0 = ifm_buff2_2_addr_2_reg_1527;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ifm_buff2_2_address0 = ifm_buff2_2_addr_reg_1437;
        end else begin
            ifm_buff2_2_address0 = 'bx;
        end
    end else begin
        ifm_buff2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ifm_buff2_2_ce0 = 1'b1;
    end else begin
        ifm_buff2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifm_buff2_2_ce1 = 1'b1;
    end else begin
        ifm_buff2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_0_ce0 = 1'b1;
    end else begin
        ofm_buff0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln173_reg_1242 == 3'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        ofm_buff0_0_we0 = 1'b1;
    end else begin
        ofm_buff0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_1_ce0 = 1'b1;
    end else begin
        ofm_buff0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln173_reg_1242 == 3'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        ofm_buff0_1_we0 = 1'b1;
    end else begin
        ofm_buff0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_2_ce0 = 1'b1;
    end else begin
        ofm_buff0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln173_reg_1242 == 3'd2) & (1'b1 == ap_CS_fsm_state39))) begin
        ofm_buff0_2_we0 = 1'b1;
    end else begin
        ofm_buff0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_3_ce0 = 1'b1;
    end else begin
        ofm_buff0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln173_reg_1242 == 3'd3) & (1'b1 == ap_CS_fsm_state39))) begin
        ofm_buff0_3_we0 = 1'b1;
    end else begin
        ofm_buff0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_4_ce0 = 1'b1;
    end else begin
        ofm_buff0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln173_reg_1242 == 3'd4) & (1'b1 == ap_CS_fsm_state39))) begin
        ofm_buff0_4_we0 = 1'b1;
    end else begin
        ofm_buff0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ofm_buff0_5_ce0 = 1'b1;
    end else begin
        ofm_buff0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) & ((select_ln173_reg_1242 == 3'd5) | ((select_ln173_reg_1242 == 3'd6) | (select_ln173_reg_1242 == 3'd7))))) begin
        ofm_buff0_5_we0 = 1'b1;
    end else begin
        ofm_buff0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln136_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln163_fu_1072_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln163_fu_1072_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln136_fu_946_p2 = (indvar_flatten_reg_818 + 8'd1);

assign add_ln173_fu_1022_p2 = (col_0_reg_829 + select_ln173_3_fu_1014_p3);

assign add_ln176_fu_987_p2 = (col_0_reg_829 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_fu_934_p2 = (col_0_reg_829 + 6'd1);

assign filter_buff_0_0_0_address0 = filter_buff_0_0_0_3_reg_1262;

assign filter_buff_0_0_1_address0 = filter_buff_0_0_1_3_reg_1307;

assign filter_buff_0_0_2_address0 = filter_buff_0_0_2_3_reg_1352;

assign filter_buff_0_1_0_address0 = filter_buff_0_1_0_3_reg_1277;

assign filter_buff_0_1_1_address0 = filter_buff_0_1_1_3_reg_1322;

assign filter_buff_0_1_2_address0 = filter_buff_0_1_2_3_reg_1367;

assign filter_buff_0_2_0_address0 = filter_buff_0_2_0_3_reg_1292;

assign filter_buff_0_2_1_address0 = filter_buff_0_2_1_3_reg_1337;

assign filter_buff_0_2_2_address0 = filter_buff_0_2_2_3_reg_1382;

assign filter_buff_1_0_0_address0 = filter_buff_1_0_0_3_reg_1267;

assign filter_buff_1_0_1_address0 = filter_buff_1_0_1_3_reg_1312;

assign filter_buff_1_0_2_address0 = filter_buff_1_0_2_3_reg_1357;

assign filter_buff_1_1_0_address0 = filter_buff_1_1_0_3_reg_1282;

assign filter_buff_1_1_1_address0 = filter_buff_1_1_1_3_reg_1327;

assign filter_buff_1_1_2_address0 = filter_buff_1_1_2_3_reg_1372;

assign filter_buff_1_2_0_address0 = filter_buff_1_2_0_3_reg_1297;

assign filter_buff_1_2_1_address0 = filter_buff_1_2_1_3_reg_1342;

assign filter_buff_1_2_2_address0 = filter_buff_1_2_2_3_reg_1387;

assign filter_buff_2_0_0_address0 = filter_buff_2_0_0_3_reg_1272;

assign filter_buff_2_0_1_address0 = filter_buff_2_0_1_3_reg_1317;

assign filter_buff_2_0_2_address0 = filter_buff_2_0_2_3_reg_1362;

assign filter_buff_2_1_0_address0 = filter_buff_2_1_0_3_reg_1287;

assign filter_buff_2_1_1_address0 = filter_buff_2_1_1_3_reg_1332;

assign filter_buff_2_1_2_address0 = filter_buff_2_1_2_3_reg_1377;

assign filter_buff_2_2_0_address0 = filter_buff_2_2_0_3_reg_1302;

assign filter_buff_2_2_1_address0 = filter_buff_2_2_1_3_reg_1347;

assign filter_buff_2_2_2_address0 = filter_buff_2_2_2_3_reg_1392;

assign icmp_ln136_fu_940_p2 = ((indvar_flatten_reg_818 == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_952_p2 = ((ti_0_reg_840 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_1072_p2 = ((ap_phi_mux_to_0_phi_fu_873_p4 == 2'd3) ? 1'b1 : 1'b0);

assign ifm_buff0_0_address1 = ifm_buff0_0_addr_1_reg_1442;

assign ifm_buff0_1_address1 = ifm_buff0_1_addr_1_reg_1447;

assign ifm_buff0_2_address1 = ifm_buff0_2_addr_1_reg_1452;

assign ifm_buff1_0_address1 = ifm_buff1_0_addr_1_reg_1457;

assign ifm_buff1_1_address1 = ifm_buff1_1_addr_1_reg_1462;

assign ifm_buff1_2_address1 = ifm_buff1_2_addr_1_reg_1467;

assign ifm_buff2_0_address1 = ifm_buff2_0_addr_1_reg_1472;

assign ifm_buff2_1_address1 = ifm_buff2_1_addr_1_reg_1477;

assign ifm_buff2_2_address1 = ifm_buff2_2_addr_1_reg_1482;

assign ofm_buff0_0_address0 = zext_ln173_reg_1252;

assign ofm_buff0_0_d0 = Y_0_reg_851;

assign ofm_buff0_1_address0 = zext_ln173_reg_1252;

assign ofm_buff0_1_d0 = Y_0_reg_851;

assign ofm_buff0_2_address0 = zext_ln173_reg_1252;

assign ofm_buff0_2_d0 = Y_0_reg_851;

assign ofm_buff0_3_address0 = zext_ln173_reg_1252;

assign ofm_buff0_3_d0 = Y_0_reg_851;

assign ofm_buff0_4_address0 = zext_ln173_reg_1252;

assign ofm_buff0_4_d0 = Y_0_reg_851;

assign ofm_buff0_5_address0 = zext_ln173_reg_1252;

assign ofm_buff0_5_d0 = Y_0_reg_851;

assign select_ln173_1_fu_966_p3 = ((icmp_ln139_fu_952_p2[0:0] === 1'b1) ? col_fu_934_p2 : col_0_reg_829);

assign select_ln173_2_fu_993_p3 = ((icmp_ln139_fu_952_p2[0:0] === 1'b1) ? add_ln176_fu_987_p2 : col_fu_934_p2);

assign select_ln173_3_fu_1014_p3 = ((icmp_ln139_fu_952_p2[0:0] === 1'b1) ? 6'd3 : 6'd2);

assign select_ln173_fu_958_p3 = ((icmp_ln139_fu_952_p2[0:0] === 1'b1) ? 3'd0 : ti_0_reg_840);

assign ti_fu_1228_p2 = (select_ln173_reg_1242 + 3'd1);

assign to_fu_1078_p2 = (ap_phi_mux_to_0_phi_fu_873_p4 + 2'd1);

assign zext_ln173_1_fu_1041_p1 = select_ln173_fu_958_p3;

assign zext_ln173_2_fu_1028_p1 = add_ln173_fu_1022_p2;

assign zext_ln173_3_fu_1001_p1 = select_ln173_2_fu_993_p3;

assign zext_ln173_fu_974_p1 = select_ln173_1_fu_966_p3;

always @ (posedge ap_clk) begin
    zext_ln173_reg_1252[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //conv_write
