-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_read is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cofm_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    cofm_TVALID : OUT STD_LOGIC;
    cofm_TREADY : IN STD_LOGIC;
    ofm_buff0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_0_ce0 : OUT STD_LOGIC;
    ofm_buff0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_1_ce0 : OUT STD_LOGIC;
    ofm_buff0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_2_ce0 : OUT STD_LOGIC;
    ofm_buff0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_3_ce0 : OUT STD_LOGIC;
    ofm_buff0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_4_ce0 : OUT STD_LOGIC;
    ofm_buff0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_5_ce0 : OUT STD_LOGIC;
    ofm_buff0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_6_ce0 : OUT STD_LOGIC;
    ofm_buff0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_7_ce0 : OUT STD_LOGIC;
    ofm_buff0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_8_ce0 : OUT STD_LOGIC;
    ofm_buff0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_9_ce0 : OUT STD_LOGIC;
    ofm_buff0_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_10_ce0 : OUT STD_LOGIC;
    ofm_buff0_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_11_ce0 : OUT STD_LOGIC;
    ofm_buff0_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_12_ce0 : OUT STD_LOGIC;
    ofm_buff0_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_13_ce0 : OUT STD_LOGIC;
    ofm_buff0_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_14_ce0 : OUT STD_LOGIC;
    ofm_buff0_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ofm_buff0_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ofm_buff0_15_ce0 : OUT STD_LOGIC;
    ofm_buff0_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cofm_counter_read : IN STD_LOGIC_VECTOR (31 downto 0);
    enable : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_read is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cofm_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln199_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_309 : STD_LOGIC_VECTOR (5 downto 0);
    signal enable_read_read_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln199_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln199_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln199_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_cofm_counter_1_phi_fu_323_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cofm_counter_1_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln202_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln217_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln216_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln215_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln214_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln213_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln212_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln211_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln210_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln209_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln208_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln207_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln206_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln205_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln204_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln203_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln202_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= ap_phi_mux_cofm_counter_1_phi_fu_323_p4;
                end if; 
            end if;
        end if;
    end process;


    cofm_counter_1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                cofm_counter_1_reg_320 <= add_ln199_reg_477;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_0))) then 
                cofm_counter_1_reg_320 <= cofm_counter_read;
            end if; 
        end if;
    end process;

    j_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
                j_0_reg_309 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln199_fu_335_p2 = ap_const_lv1_0))) then 
                j_0_reg_309 <= j_fu_341_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then
                add_ln199_reg_477 <= add_ln199_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln199_reg_482 <= icmp_ln199_fu_335_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_82_p2, icmp_ln199_fu_335_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_82_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln199_fu_335_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln199_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln199_fu_329_p2 <= std_logic_vector(unsigned(cofm_counter_read) + unsigned(ap_const_lv32_38));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(cofm_TREADY, icmp_ln199_reg_482)
    begin
                ap_block_state3_io <= ((cofm_TREADY = ap_const_logic_0) and (icmp_ln199_reg_482 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln199_fu_335_p2)
    begin
        if ((icmp_ln199_fu_335_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cofm_counter_1_phi_fu_323_p4_assign_proc : process(enable_read_read_fu_82_p2, add_ln199_reg_477, cofm_counter_1_reg_320, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_cofm_counter_1_phi_fu_323_p4 <= add_ln199_reg_477;
        else 
            ap_phi_mux_cofm_counter_1_phi_fu_323_p4 <= cofm_counter_1_reg_320;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_cofm_counter_1_phi_fu_323_p4, ap_CS_fsm_state4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= ap_phi_mux_cofm_counter_1_phi_fu_323_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln202_fu_367_p1 <= ofm_buff0_0_q0;
    bitcast_ln203_fu_371_p1 <= ofm_buff0_1_q0;
    bitcast_ln204_fu_375_p1 <= ofm_buff0_2_q0;
    bitcast_ln205_fu_379_p1 <= ofm_buff0_3_q0;
    bitcast_ln206_fu_383_p1 <= ofm_buff0_4_q0;
    bitcast_ln207_fu_387_p1 <= ofm_buff0_5_q0;
    bitcast_ln208_fu_391_p1 <= ofm_buff0_6_q0;
    bitcast_ln209_fu_395_p1 <= ofm_buff0_7_q0;
    bitcast_ln210_fu_399_p1 <= ofm_buff0_8_q0;
    bitcast_ln211_fu_403_p1 <= ofm_buff0_9_q0;
    bitcast_ln212_fu_407_p1 <= ofm_buff0_10_q0;
    bitcast_ln213_fu_411_p1 <= ofm_buff0_11_q0;
    bitcast_ln214_fu_415_p1 <= ofm_buff0_12_q0;
    bitcast_ln215_fu_419_p1 <= ofm_buff0_13_q0;
    bitcast_ln216_fu_423_p1 <= ofm_buff0_14_q0;
    bitcast_ln217_fu_427_p1 <= ofm_buff0_15_q0;
    cofm_TDATA <= (((((((((((((((bitcast_ln217_fu_427_p1 & bitcast_ln216_fu_423_p1) & bitcast_ln215_fu_419_p1) & bitcast_ln214_fu_415_p1) & bitcast_ln213_fu_411_p1) & bitcast_ln212_fu_407_p1) & bitcast_ln211_fu_403_p1) & bitcast_ln210_fu_399_p1) & bitcast_ln209_fu_395_p1) & bitcast_ln208_fu_391_p1) & bitcast_ln207_fu_387_p1) & bitcast_ln206_fu_383_p1) & bitcast_ln205_fu_379_p1) & bitcast_ln204_fu_375_p1) & bitcast_ln203_fu_371_p1) & bitcast_ln202_fu_367_p1);

    cofm_TDATA_blk_n_assign_proc : process(cofm_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln199_reg_482)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln199_reg_482 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cofm_TDATA_blk_n <= cofm_TREADY;
        else 
            cofm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cofm_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln199_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln199_reg_482 = ap_const_lv1_0))) then 
            cofm_TVALID <= ap_const_logic_1;
        else 
            cofm_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    enable_read_read_fu_82_p2 <= (0=>enable, others=>'-');
    icmp_ln199_fu_335_p2 <= "1" when (j_0_reg_309 = ap_const_lv6_38) else "0";
    j_fu_341_p2 <= std_logic_vector(unsigned(j_0_reg_309) + unsigned(ap_const_lv6_1));
    ofm_buff0_0_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_0_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_10_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_10_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_11_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_11_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_12_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_12_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_13_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_13_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_14_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_14_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_15_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_15_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_1_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_1_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_2_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_2_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_3_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_3_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_4_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_4_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_5_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_5_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_6_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_6_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_7_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_7_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_8_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_8_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_buff0_9_address0 <= zext_ln202_fu_347_p1(6 - 1 downto 0);

    ofm_buff0_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ofm_buff0_9_ce0 <= ap_const_logic_1;
        else 
            ofm_buff0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln202_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_309),64));
end behav;
