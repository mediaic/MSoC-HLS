-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dnn_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cifm_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    cifm_TVALID : IN STD_LOGIC;
    cifm_TREADY : OUT STD_LOGIC;
    cofm_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    cofm_TVALID : OUT STD_LOGIC;
    cofm_TREADY : IN STD_LOGIC;
    tran_wgt_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    tran_wgt_TVALID : IN STD_LOGIC;
    tran_wgt_TREADY : OUT STD_LOGIC;
    config_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_TVALID : IN STD_LOGIC;
    config_r_TREADY : OUT STD_LOGIC );
end;


architecture behav of dnn_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dnn_hw,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685000,HLS_SYN_LAT=2289718,HLS_SYN_TPT=none,HLS_SYN_MEM=288,HLS_SYN_DSP=10,HLS_SYN_FF=17629,HLS_SYN_LUT=43311,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal config_r_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln738_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln738_reg_71 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln735_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_hw_fu_38_ap_start : STD_LOGIC;
    signal grp_pool_hw_fu_38_ap_done : STD_LOGIC;
    signal grp_pool_hw_fu_38_ap_idle : STD_LOGIC;
    signal grp_pool_hw_fu_38_ap_ready : STD_LOGIC;
    signal grp_pool_hw_fu_38_cifm_TREADY : STD_LOGIC;
    signal grp_pool_hw_fu_38_cofm_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_pool_hw_fu_38_cofm_TVALID : STD_LOGIC;
    signal grp_pool_hw_fu_38_cofm_TREADY : STD_LOGIC;
    signal grp_convolution_hw_fu_46_ap_start : STD_LOGIC;
    signal grp_convolution_hw_fu_46_ap_done : STD_LOGIC;
    signal grp_convolution_hw_fu_46_ap_idle : STD_LOGIC;
    signal grp_convolution_hw_fu_46_ap_ready : STD_LOGIC;
    signal grp_convolution_hw_fu_46_cifm_TREADY : STD_LOGIC;
    signal grp_convolution_hw_fu_46_cofm_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_convolution_hw_fu_46_cofm_TVALID : STD_LOGIC;
    signal grp_convolution_hw_fu_46_cofm_TREADY : STD_LOGIC;
    signal grp_convolution_hw_fu_46_tran_wgt_TREADY : STD_LOGIC;
    signal grp_pool_hw_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_convolution_hw_fu_46_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_cofm_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal regslice_both_cifm_U_apdone_blk : STD_LOGIC;
    signal cifm_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal cifm_TVALID_int : STD_LOGIC;
    signal cifm_TREADY_int : STD_LOGIC;
    signal regslice_both_cifm_U_ack_in : STD_LOGIC;
    signal cofm_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal cofm_TVALID_int : STD_LOGIC;
    signal cofm_TREADY_int : STD_LOGIC;
    signal regslice_both_cofm_U_vld_out : STD_LOGIC;
    signal regslice_both_tran_wgt_U_apdone_blk : STD_LOGIC;
    signal tran_wgt_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal tran_wgt_TVALID_int : STD_LOGIC;
    signal tran_wgt_TREADY_int : STD_LOGIC;
    signal regslice_both_tran_wgt_U_ack_in : STD_LOGIC;
    signal regslice_both_config_r_U_apdone_blk : STD_LOGIC;
    signal config_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal config_r_TVALID_int : STD_LOGIC;
    signal config_r_TREADY_int : STD_LOGIC;
    signal regslice_both_config_r_U_ack_in : STD_LOGIC;

    component pool_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cifm_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        cifm_TVALID : IN STD_LOGIC;
        cifm_TREADY : OUT STD_LOGIC;
        cofm_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        cofm_TVALID : OUT STD_LOGIC;
        cofm_TREADY : IN STD_LOGIC );
    end component;


    component convolution_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cifm_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        cifm_TVALID : IN STD_LOGIC;
        cifm_TREADY : OUT STD_LOGIC;
        cofm_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        cofm_TVALID : OUT STD_LOGIC;
        cofm_TREADY : IN STD_LOGIC;
        tran_wgt_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        tran_wgt_TVALID : IN STD_LOGIC;
        tran_wgt_TREADY : OUT STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_pool_hw_fu_38 : component pool_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool_hw_fu_38_ap_start,
        ap_done => grp_pool_hw_fu_38_ap_done,
        ap_idle => grp_pool_hw_fu_38_ap_idle,
        ap_ready => grp_pool_hw_fu_38_ap_ready,
        cifm_TDATA => cifm_TDATA_int,
        cifm_TVALID => cifm_TVALID_int,
        cifm_TREADY => grp_pool_hw_fu_38_cifm_TREADY,
        cofm_TDATA => grp_pool_hw_fu_38_cofm_TDATA,
        cofm_TVALID => grp_pool_hw_fu_38_cofm_TVALID,
        cofm_TREADY => grp_pool_hw_fu_38_cofm_TREADY);

    grp_convolution_hw_fu_46 : component convolution_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution_hw_fu_46_ap_start,
        ap_done => grp_convolution_hw_fu_46_ap_done,
        ap_idle => grp_convolution_hw_fu_46_ap_idle,
        ap_ready => grp_convolution_hw_fu_46_ap_ready,
        cifm_TDATA => cifm_TDATA_int,
        cifm_TVALID => cifm_TVALID_int,
        cifm_TREADY => grp_convolution_hw_fu_46_cifm_TREADY,
        cofm_TDATA => grp_convolution_hw_fu_46_cofm_TDATA,
        cofm_TVALID => grp_convolution_hw_fu_46_cofm_TVALID,
        cofm_TREADY => grp_convolution_hw_fu_46_cofm_TREADY,
        tran_wgt_TDATA => tran_wgt_TDATA_int,
        tran_wgt_TVALID => tran_wgt_TVALID_int,
        tran_wgt_TREADY => grp_convolution_hw_fu_46_tran_wgt_TREADY);

    regslice_both_cifm_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => cifm_TDATA,
        vld_in => cifm_TVALID,
        ack_in => regslice_both_cifm_U_ack_in,
        data_out => cifm_TDATA_int,
        vld_out => cifm_TVALID_int,
        ack_out => cifm_TREADY_int,
        apdone_blk => regslice_both_cifm_U_apdone_blk);

    regslice_both_cofm_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => cofm_TDATA_int,
        vld_in => cofm_TVALID_int,
        ack_in => cofm_TREADY_int,
        data_out => cofm_TDATA,
        vld_out => regslice_both_cofm_U_vld_out,
        ack_out => cofm_TREADY,
        apdone_blk => regslice_both_cofm_U_apdone_blk);

    regslice_both_tran_wgt_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tran_wgt_TDATA,
        vld_in => tran_wgt_TVALID,
        ack_in => regslice_both_tran_wgt_U_ack_in,
        data_out => tran_wgt_TDATA_int,
        vld_out => tran_wgt_TVALID_int,
        ack_out => tran_wgt_TREADY_int,
        apdone_blk => regslice_both_tran_wgt_U_apdone_blk);

    regslice_both_config_r_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => config_r_TDATA,
        vld_in => config_r_TVALID,
        ack_in => regslice_both_config_r_U_ack_in,
        data_out => config_r_TDATA_int,
        vld_out => config_r_TVALID_int,
        ack_out => config_r_TREADY_int,
        apdone_blk => regslice_both_config_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution_hw_fu_46_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution_hw_fu_46_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (icmp_ln735_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolution_hw_fu_46_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_hw_fu_46_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_hw_fu_46_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_hw_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pool_hw_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (icmp_ln735_fu_56_p2 = ap_const_lv1_0) and (icmp_ln738_fu_62_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_pool_hw_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_hw_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_pool_hw_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (icmp_ln735_fu_56_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln738_reg_71 <= icmp_ln738_fu_62_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln735_fu_56_p2, grp_convolution_hw_fu_46_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_cofm_U_apdone_blk, ap_block_state2_on_subcall_done, config_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (icmp_ln735_fu_56_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (icmp_ln735_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_convolution_hw_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_cofm_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, config_r_TVALID_int)
    begin
                ap_block_state1 <= ((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, config_r_TVALID_int)
    begin
                ap_block_state1_ignore_call0 <= ((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(icmp_ln738_reg_71, grp_pool_hw_fu_38_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((icmp_ln738_reg_71 = ap_const_lv1_1) and (grp_pool_hw_fu_38_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_cofm_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_cofm_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_cofm_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_cofm_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    cifm_TREADY_assign_proc : process(cifm_TVALID, regslice_both_cifm_U_ack_in)
    begin
        if (((cifm_TVALID = ap_const_logic_1) and (regslice_both_cifm_U_ack_in = ap_const_logic_1))) then 
            cifm_TREADY <= ap_const_logic_1;
        else 
            cifm_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    cifm_TREADY_int_assign_proc : process(icmp_ln738_reg_71, grp_pool_hw_fu_38_cifm_TREADY, grp_convolution_hw_fu_46_cifm_TREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cifm_TREADY_int <= grp_convolution_hw_fu_46_cifm_TREADY;
        elsif (((icmp_ln738_reg_71 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cifm_TREADY_int <= grp_pool_hw_fu_38_cifm_TREADY;
        else 
            cifm_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    cofm_TDATA_int_assign_proc : process(icmp_ln738_reg_71, grp_pool_hw_fu_38_cofm_TDATA, grp_pool_hw_fu_38_cofm_TVALID, grp_convolution_hw_fu_46_cofm_TDATA, grp_convolution_hw_fu_46_cofm_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((grp_convolution_hw_fu_46_cofm_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cofm_TDATA_int <= grp_convolution_hw_fu_46_cofm_TDATA;
        elsif (((icmp_ln738_reg_71 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_pool_hw_fu_38_cofm_TVALID = ap_const_logic_1))) then 
            cofm_TDATA_int <= grp_pool_hw_fu_38_cofm_TDATA;
        else 
            cofm_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    cofm_TVALID <= regslice_both_cofm_U_vld_out;

    cofm_TVALID_int_assign_proc : process(icmp_ln738_reg_71, grp_pool_hw_fu_38_cofm_TVALID, grp_convolution_hw_fu_46_cofm_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cofm_TVALID_int <= grp_convolution_hw_fu_46_cofm_TVALID;
        elsif (((icmp_ln738_reg_71 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cofm_TVALID_int <= grp_pool_hw_fu_38_cofm_TVALID;
        else 
            cofm_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    config_r_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, config_r_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            config_r_TDATA_blk_n <= config_r_TVALID_int;
        else 
            config_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    config_r_TREADY_assign_proc : process(config_r_TVALID, regslice_both_config_r_U_ack_in)
    begin
        if (((config_r_TVALID = ap_const_logic_1) and (regslice_both_config_r_U_ack_in = ap_const_logic_1))) then 
            config_r_TREADY <= ap_const_logic_1;
        else 
            config_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    config_r_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, config_r_TVALID_int)
    begin
        if ((not(((config_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_r_TREADY_int <= ap_const_logic_1;
        else 
            config_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution_hw_fu_46_ap_start <= grp_convolution_hw_fu_46_ap_start_reg;
    grp_convolution_hw_fu_46_cofm_TREADY <= (cofm_TREADY_int and ap_CS_fsm_state3);
    grp_pool_hw_fu_38_ap_start <= grp_pool_hw_fu_38_ap_start_reg;
    grp_pool_hw_fu_38_cofm_TREADY <= (cofm_TREADY_int and ap_CS_fsm_state2);
    icmp_ln735_fu_56_p2 <= "1" when (config_r_TDATA_int = ap_const_lv32_0) else "0";
    icmp_ln738_fu_62_p2 <= "1" when (config_r_TDATA_int = ap_const_lv32_1) else "0";

    tran_wgt_TREADY_assign_proc : process(tran_wgt_TVALID, regslice_both_tran_wgt_U_ack_in)
    begin
        if (((tran_wgt_TVALID = ap_const_logic_1) and (regslice_both_tran_wgt_U_ack_in = ap_const_logic_1))) then 
            tran_wgt_TREADY <= ap_const_logic_1;
        else 
            tran_wgt_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    tran_wgt_TREADY_int_assign_proc : process(grp_convolution_hw_fu_46_tran_wgt_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tran_wgt_TREADY_int <= grp_convolution_hw_fu_46_tran_wgt_TREADY;
        else 
            tran_wgt_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
