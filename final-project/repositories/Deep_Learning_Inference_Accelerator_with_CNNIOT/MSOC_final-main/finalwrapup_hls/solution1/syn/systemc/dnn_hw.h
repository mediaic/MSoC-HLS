// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dnn_hw_HH_
#define _dnn_hw_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pool_hw.h"
#include "convolution_hw.h"

namespace ap_rtl {

struct dnn_hw : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<512> > cifm_TDATA;
    sc_in< sc_logic > cifm_TVALID;
    sc_out< sc_logic > cifm_TREADY;
    sc_out< sc_lv<512> > cofm_TDATA;
    sc_out< sc_logic > cofm_TVALID;
    sc_in< sc_logic > cofm_TREADY;
    sc_in< sc_lv<512> > tran_wgt_TDATA;
    sc_in< sc_logic > tran_wgt_TVALID;
    sc_out< sc_logic > tran_wgt_TREADY;
    sc_in< sc_lv<32> > config_r_TDATA;
    sc_in< sc_logic > config_r_TVALID;
    sc_out< sc_logic > config_r_TREADY;


    // Module declarations
    dnn_hw(sc_module_name name);
    SC_HAS_PROCESS(dnn_hw);

    ~dnn_hw();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    pool_hw* grp_pool_hw_fu_38;
    convolution_hw* grp_convolution_hw_fu_46;
    regslice_both<512>* regslice_both_cifm_U;
    regslice_both<512>* regslice_both_cofm_U;
    regslice_both<512>* regslice_both_tran_wgt_U;
    regslice_both<32>* regslice_both_config_r_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > config_r_TDATA_blk_n;
    sc_signal< sc_lv<1> > icmp_ln738_fu_62_p2;
    sc_signal< sc_lv<1> > icmp_ln738_reg_71;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln735_fu_56_p2;
    sc_signal< sc_logic > grp_pool_hw_fu_38_ap_start;
    sc_signal< sc_logic > grp_pool_hw_fu_38_ap_done;
    sc_signal< sc_logic > grp_pool_hw_fu_38_ap_idle;
    sc_signal< sc_logic > grp_pool_hw_fu_38_ap_ready;
    sc_signal< sc_logic > grp_pool_hw_fu_38_cifm_TREADY;
    sc_signal< sc_lv<512> > grp_pool_hw_fu_38_cofm_TDATA;
    sc_signal< sc_logic > grp_pool_hw_fu_38_cofm_TVALID;
    sc_signal< sc_logic > grp_pool_hw_fu_38_cofm_TREADY;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_ap_start;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_ap_done;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_ap_idle;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_ap_ready;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_cifm_TREADY;
    sc_signal< sc_lv<512> > grp_convolution_hw_fu_46_cofm_TDATA;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_cofm_TVALID;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_cofm_TREADY;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_tran_wgt_TREADY;
    sc_signal< sc_logic > grp_pool_hw_fu_38_ap_start_reg;
    sc_signal< bool > ap_block_state1_ignore_call0;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_convolution_hw_fu_46_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > regslice_both_cofm_U_apdone_blk;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_logic > regslice_both_cifm_U_apdone_blk;
    sc_signal< sc_lv<512> > cifm_TDATA_int;
    sc_signal< sc_logic > cifm_TVALID_int;
    sc_signal< sc_logic > cifm_TREADY_int;
    sc_signal< sc_logic > regslice_both_cifm_U_ack_in;
    sc_signal< sc_lv<512> > cofm_TDATA_int;
    sc_signal< sc_logic > cofm_TVALID_int;
    sc_signal< sc_logic > cofm_TREADY_int;
    sc_signal< sc_logic > regslice_both_cofm_U_vld_out;
    sc_signal< sc_logic > regslice_both_tran_wgt_U_apdone_blk;
    sc_signal< sc_lv<512> > tran_wgt_TDATA_int;
    sc_signal< sc_logic > tran_wgt_TVALID_int;
    sc_signal< sc_logic > tran_wgt_TREADY_int;
    sc_signal< sc_logic > regslice_both_tran_wgt_U_ack_in;
    sc_signal< sc_logic > regslice_both_config_r_U_apdone_blk;
    sc_signal< sc_lv<32> > config_r_TDATA_int;
    sc_signal< sc_logic > config_r_TVALID_int;
    sc_signal< sc_logic > config_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_config_r_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call0();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_cifm_TREADY();
    void thread_cifm_TREADY_int();
    void thread_cofm_TDATA_int();
    void thread_cofm_TVALID();
    void thread_cofm_TVALID_int();
    void thread_config_r_TDATA_blk_n();
    void thread_config_r_TREADY();
    void thread_config_r_TREADY_int();
    void thread_grp_convolution_hw_fu_46_ap_start();
    void thread_grp_convolution_hw_fu_46_cofm_TREADY();
    void thread_grp_pool_hw_fu_38_ap_start();
    void thread_grp_pool_hw_fu_38_cofm_TREADY();
    void thread_icmp_ln735_fu_56_p2();
    void thread_icmp_ln738_fu_62_p2();
    void thread_tran_wgt_TREADY();
    void thread_tran_wgt_TREADY_int();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
