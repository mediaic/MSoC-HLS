// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dnn_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dnn_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dnn_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> dnn_hw::ap_ST_fsm_state1 = "1";
const sc_lv<4> dnn_hw::ap_ST_fsm_state2 = "10";
const sc_lv<4> dnn_hw::ap_ST_fsm_state3 = "100";
const sc_lv<4> dnn_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<32> dnn_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dnn_hw::ap_const_lv1_0 = "0";
const sc_lv<1> dnn_hw::ap_const_lv1_1 = "1";
const sc_lv<32> dnn_hw::ap_const_lv32_1 = "1";
const sc_lv<32> dnn_hw::ap_const_lv32_2 = "10";
const sc_lv<32> dnn_hw::ap_const_lv32_3 = "11";
const bool dnn_hw::ap_const_boolean_0 = false;
const bool dnn_hw::ap_const_boolean_1 = true;

dnn_hw::dnn_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_pool_hw_fu_38 = new pool_hw("grp_pool_hw_fu_38");
    grp_pool_hw_fu_38->ap_clk(ap_clk);
    grp_pool_hw_fu_38->ap_rst(ap_rst_n_inv);
    grp_pool_hw_fu_38->ap_start(grp_pool_hw_fu_38_ap_start);
    grp_pool_hw_fu_38->ap_done(grp_pool_hw_fu_38_ap_done);
    grp_pool_hw_fu_38->ap_idle(grp_pool_hw_fu_38_ap_idle);
    grp_pool_hw_fu_38->ap_ready(grp_pool_hw_fu_38_ap_ready);
    grp_pool_hw_fu_38->cifm_TDATA(cifm_TDATA_int);
    grp_pool_hw_fu_38->cifm_TVALID(cifm_TVALID_int);
    grp_pool_hw_fu_38->cifm_TREADY(grp_pool_hw_fu_38_cifm_TREADY);
    grp_pool_hw_fu_38->cofm_TDATA(grp_pool_hw_fu_38_cofm_TDATA);
    grp_pool_hw_fu_38->cofm_TVALID(grp_pool_hw_fu_38_cofm_TVALID);
    grp_pool_hw_fu_38->cofm_TREADY(grp_pool_hw_fu_38_cofm_TREADY);
    grp_convolution_hw_fu_46 = new convolution_hw("grp_convolution_hw_fu_46");
    grp_convolution_hw_fu_46->ap_clk(ap_clk);
    grp_convolution_hw_fu_46->ap_rst(ap_rst_n_inv);
    grp_convolution_hw_fu_46->ap_start(grp_convolution_hw_fu_46_ap_start);
    grp_convolution_hw_fu_46->ap_done(grp_convolution_hw_fu_46_ap_done);
    grp_convolution_hw_fu_46->ap_idle(grp_convolution_hw_fu_46_ap_idle);
    grp_convolution_hw_fu_46->ap_ready(grp_convolution_hw_fu_46_ap_ready);
    grp_convolution_hw_fu_46->cifm_TDATA(cifm_TDATA_int);
    grp_convolution_hw_fu_46->cifm_TVALID(cifm_TVALID_int);
    grp_convolution_hw_fu_46->cifm_TREADY(grp_convolution_hw_fu_46_cifm_TREADY);
    grp_convolution_hw_fu_46->cofm_TDATA(grp_convolution_hw_fu_46_cofm_TDATA);
    grp_convolution_hw_fu_46->cofm_TVALID(grp_convolution_hw_fu_46_cofm_TVALID);
    grp_convolution_hw_fu_46->cofm_TREADY(grp_convolution_hw_fu_46_cofm_TREADY);
    grp_convolution_hw_fu_46->tran_wgt_TDATA(tran_wgt_TDATA_int);
    grp_convolution_hw_fu_46->tran_wgt_TVALID(tran_wgt_TVALID_int);
    grp_convolution_hw_fu_46->tran_wgt_TREADY(grp_convolution_hw_fu_46_tran_wgt_TREADY);
    regslice_both_cifm_U = new regslice_both<512>("regslice_both_cifm_U");
    regslice_both_cifm_U->ap_clk(ap_clk);
    regslice_both_cifm_U->ap_rst(ap_rst_n_inv);
    regslice_both_cifm_U->data_in(cifm_TDATA);
    regslice_both_cifm_U->vld_in(cifm_TVALID);
    regslice_both_cifm_U->ack_in(regslice_both_cifm_U_ack_in);
    regslice_both_cifm_U->data_out(cifm_TDATA_int);
    regslice_both_cifm_U->vld_out(cifm_TVALID_int);
    regslice_both_cifm_U->ack_out(cifm_TREADY_int);
    regslice_both_cifm_U->apdone_blk(regslice_both_cifm_U_apdone_blk);
    regslice_both_cofm_U = new regslice_both<512>("regslice_both_cofm_U");
    regslice_both_cofm_U->ap_clk(ap_clk);
    regslice_both_cofm_U->ap_rst(ap_rst_n_inv);
    regslice_both_cofm_U->data_in(cofm_TDATA_int);
    regslice_both_cofm_U->vld_in(cofm_TVALID_int);
    regslice_both_cofm_U->ack_in(cofm_TREADY_int);
    regslice_both_cofm_U->data_out(cofm_TDATA);
    regslice_both_cofm_U->vld_out(regslice_both_cofm_U_vld_out);
    regslice_both_cofm_U->ack_out(cofm_TREADY);
    regslice_both_cofm_U->apdone_blk(regslice_both_cofm_U_apdone_blk);
    regslice_both_tran_wgt_U = new regslice_both<512>("regslice_both_tran_wgt_U");
    regslice_both_tran_wgt_U->ap_clk(ap_clk);
    regslice_both_tran_wgt_U->ap_rst(ap_rst_n_inv);
    regslice_both_tran_wgt_U->data_in(tran_wgt_TDATA);
    regslice_both_tran_wgt_U->vld_in(tran_wgt_TVALID);
    regslice_both_tran_wgt_U->ack_in(regslice_both_tran_wgt_U_ack_in);
    regslice_both_tran_wgt_U->data_out(tran_wgt_TDATA_int);
    regslice_both_tran_wgt_U->vld_out(tran_wgt_TVALID_int);
    regslice_both_tran_wgt_U->ack_out(tran_wgt_TREADY_int);
    regslice_both_tran_wgt_U->apdone_blk(regslice_both_tran_wgt_U_apdone_blk);
    regslice_both_config_r_U = new regslice_both<32>("regslice_both_config_r_U");
    regslice_both_config_r_U->ap_clk(ap_clk);
    regslice_both_config_r_U->ap_rst(ap_rst_n_inv);
    regslice_both_config_r_U->data_in(config_r_TDATA);
    regslice_both_config_r_U->vld_in(config_r_TVALID);
    regslice_both_config_r_U->ack_in(regslice_both_config_r_U_ack_in);
    regslice_both_config_r_U->data_out(config_r_TDATA_int);
    regslice_both_config_r_U->vld_out(config_r_TVALID_int);
    regslice_both_config_r_U->ack_out(config_r_TREADY_int);
    regslice_both_config_r_U->apdone_blk(regslice_both_config_r_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_ap_block_state1_ignore_call0);
    sensitive << ( ap_start );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( icmp_ln738_reg_71 );
    sensitive << ( grp_pool_hw_fu_38_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_cofm_U_apdone_blk );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_cofm_U_apdone_blk );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_cifm_TREADY);
    sensitive << ( cifm_TVALID );
    sensitive << ( regslice_both_cifm_U_ack_in );

    SC_METHOD(thread_cifm_TREADY_int);
    sensitive << ( icmp_ln738_reg_71 );
    sensitive << ( grp_pool_hw_fu_38_cifm_TREADY );
    sensitive << ( grp_convolution_hw_fu_46_cifm_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cofm_TDATA_int);
    sensitive << ( icmp_ln738_reg_71 );
    sensitive << ( grp_pool_hw_fu_38_cofm_TDATA );
    sensitive << ( grp_pool_hw_fu_38_cofm_TVALID );
    sensitive << ( grp_convolution_hw_fu_46_cofm_TDATA );
    sensitive << ( grp_convolution_hw_fu_46_cofm_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cofm_TVALID);
    sensitive << ( regslice_both_cofm_U_vld_out );

    SC_METHOD(thread_cofm_TVALID_int);
    sensitive << ( icmp_ln738_reg_71 );
    sensitive << ( grp_pool_hw_fu_38_cofm_TVALID );
    sensitive << ( grp_convolution_hw_fu_46_cofm_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_config_r_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_config_r_TREADY);
    sensitive << ( config_r_TVALID );
    sensitive << ( regslice_both_config_r_U_ack_in );

    SC_METHOD(thread_config_r_TREADY_int);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_grp_convolution_hw_fu_46_ap_start);
    sensitive << ( grp_convolution_hw_fu_46_ap_start_reg );

    SC_METHOD(thread_grp_convolution_hw_fu_46_cofm_TREADY);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( cofm_TREADY_int );

    SC_METHOD(thread_grp_pool_hw_fu_38_ap_start);
    sensitive << ( grp_pool_hw_fu_38_ap_start_reg );

    SC_METHOD(thread_grp_pool_hw_fu_38_cofm_TREADY);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( cofm_TREADY_int );

    SC_METHOD(thread_icmp_ln735_fu_56_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_r_TDATA_int );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_icmp_ln738_fu_62_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln735_fu_56_p2 );
    sensitive << ( config_r_TDATA_int );
    sensitive << ( config_r_TVALID_int );

    SC_METHOD(thread_tran_wgt_TREADY);
    sensitive << ( tran_wgt_TVALID );
    sensitive << ( regslice_both_tran_wgt_U_ack_in );

    SC_METHOD(thread_tran_wgt_TREADY_int);
    sensitive << ( grp_convolution_hw_fu_46_tran_wgt_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln735_fu_56_p2 );
    sensitive << ( grp_convolution_hw_fu_46_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_cofm_U_apdone_blk );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( config_r_TVALID_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    grp_pool_hw_fu_38_ap_start_reg = SC_LOGIC_0;
    grp_convolution_hw_fu_46_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dnn_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cifm_TDATA, "(port)cifm_TDATA");
    sc_trace(mVcdFile, cifm_TVALID, "(port)cifm_TVALID");
    sc_trace(mVcdFile, cifm_TREADY, "(port)cifm_TREADY");
    sc_trace(mVcdFile, cofm_TDATA, "(port)cofm_TDATA");
    sc_trace(mVcdFile, cofm_TVALID, "(port)cofm_TVALID");
    sc_trace(mVcdFile, cofm_TREADY, "(port)cofm_TREADY");
    sc_trace(mVcdFile, tran_wgt_TDATA, "(port)tran_wgt_TDATA");
    sc_trace(mVcdFile, tran_wgt_TVALID, "(port)tran_wgt_TVALID");
    sc_trace(mVcdFile, tran_wgt_TREADY, "(port)tran_wgt_TREADY");
    sc_trace(mVcdFile, config_r_TDATA, "(port)config_r_TDATA");
    sc_trace(mVcdFile, config_r_TVALID, "(port)config_r_TVALID");
    sc_trace(mVcdFile, config_r_TREADY, "(port)config_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, config_r_TDATA_blk_n, "config_r_TDATA_blk_n");
    sc_trace(mVcdFile, icmp_ln738_fu_62_p2, "icmp_ln738_fu_62_p2");
    sc_trace(mVcdFile, icmp_ln738_reg_71, "icmp_ln738_reg_71");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, icmp_ln735_fu_56_p2, "icmp_ln735_fu_56_p2");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_ap_start, "grp_pool_hw_fu_38_ap_start");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_ap_done, "grp_pool_hw_fu_38_ap_done");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_ap_idle, "grp_pool_hw_fu_38_ap_idle");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_ap_ready, "grp_pool_hw_fu_38_ap_ready");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_cifm_TREADY, "grp_pool_hw_fu_38_cifm_TREADY");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_cofm_TDATA, "grp_pool_hw_fu_38_cofm_TDATA");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_cofm_TVALID, "grp_pool_hw_fu_38_cofm_TVALID");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_cofm_TREADY, "grp_pool_hw_fu_38_cofm_TREADY");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_ap_start, "grp_convolution_hw_fu_46_ap_start");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_ap_done, "grp_convolution_hw_fu_46_ap_done");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_ap_idle, "grp_convolution_hw_fu_46_ap_idle");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_ap_ready, "grp_convolution_hw_fu_46_ap_ready");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_cifm_TREADY, "grp_convolution_hw_fu_46_cifm_TREADY");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_cofm_TDATA, "grp_convolution_hw_fu_46_cofm_TDATA");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_cofm_TVALID, "grp_convolution_hw_fu_46_cofm_TVALID");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_cofm_TREADY, "grp_convolution_hw_fu_46_cofm_TREADY");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_tran_wgt_TREADY, "grp_convolution_hw_fu_46_tran_wgt_TREADY");
    sc_trace(mVcdFile, grp_pool_hw_fu_38_ap_start_reg, "grp_pool_hw_fu_38_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state1_ignore_call0, "ap_block_state1_ignore_call0");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_convolution_hw_fu_46_ap_start_reg, "grp_convolution_hw_fu_46_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, regslice_both_cofm_U_apdone_blk, "regslice_both_cofm_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, regslice_both_cifm_U_apdone_blk, "regslice_both_cifm_U_apdone_blk");
    sc_trace(mVcdFile, cifm_TDATA_int, "cifm_TDATA_int");
    sc_trace(mVcdFile, cifm_TVALID_int, "cifm_TVALID_int");
    sc_trace(mVcdFile, cifm_TREADY_int, "cifm_TREADY_int");
    sc_trace(mVcdFile, regslice_both_cifm_U_ack_in, "regslice_both_cifm_U_ack_in");
    sc_trace(mVcdFile, cofm_TDATA_int, "cofm_TDATA_int");
    sc_trace(mVcdFile, cofm_TVALID_int, "cofm_TVALID_int");
    sc_trace(mVcdFile, cofm_TREADY_int, "cofm_TREADY_int");
    sc_trace(mVcdFile, regslice_both_cofm_U_vld_out, "regslice_both_cofm_U_vld_out");
    sc_trace(mVcdFile, regslice_both_tran_wgt_U_apdone_blk, "regslice_both_tran_wgt_U_apdone_blk");
    sc_trace(mVcdFile, tran_wgt_TDATA_int, "tran_wgt_TDATA_int");
    sc_trace(mVcdFile, tran_wgt_TVALID_int, "tran_wgt_TVALID_int");
    sc_trace(mVcdFile, tran_wgt_TREADY_int, "tran_wgt_TREADY_int");
    sc_trace(mVcdFile, regslice_both_tran_wgt_U_ack_in, "regslice_both_tran_wgt_U_ack_in");
    sc_trace(mVcdFile, regslice_both_config_r_U_apdone_blk, "regslice_both_config_r_U_apdone_blk");
    sc_trace(mVcdFile, config_r_TDATA_int, "config_r_TDATA_int");
    sc_trace(mVcdFile, config_r_TVALID_int, "config_r_TVALID_int");
    sc_trace(mVcdFile, config_r_TREADY_int, "config_r_TREADY_int");
    sc_trace(mVcdFile, regslice_both_config_r_U_ack_in, "regslice_both_config_r_U_ack_in");
#endif

    }
    mHdltvinHandle.open("dnn_hw.hdltvin.dat");
    mHdltvoutHandle.open("dnn_hw.hdltvout.dat");
}

dnn_hw::~dnn_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_pool_hw_fu_38;
    delete grp_convolution_hw_fu_46;
    delete regslice_both_cifm_U;
    delete regslice_both_cofm_U;
    delete regslice_both_tran_wgt_U;
    delete regslice_both_config_r_U;
}

void dnn_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_convolution_hw_fu_46_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(icmp_ln735_fu_56_p2.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
            grp_convolution_hw_fu_46_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convolution_hw_fu_46_ap_ready.read())) {
            grp_convolution_hw_fu_46_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_pool_hw_fu_38_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(icmp_ln735_fu_56_p2.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(icmp_ln738_fu_62_p2.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
            grp_pool_hw_fu_38_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_pool_hw_fu_38_ap_ready.read())) {
            grp_pool_hw_fu_38_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln735_fu_56_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
        icmp_ln738_reg_71 = icmp_ln738_fu_62_p2.read();
    }
}

void dnn_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dnn_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dnn_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dnn_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dnn_hw::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read()));
}

void dnn_hw::thread_ap_block_state1_ignore_call0() {
    ap_block_state1_ignore_call0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read()));
}

void dnn_hw::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = (esl_seteq<1,1,1>(icmp_ln738_reg_71.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, grp_pool_hw_fu_38_ap_done.read()));
}

void dnn_hw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(regslice_both_cofm_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dnn_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dnn_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(regslice_both_cofm_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dnn_hw::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void dnn_hw::thread_cifm_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, cifm_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_cifm_U_ack_in.read()))) {
        cifm_TREADY = ap_const_logic_1;
    } else {
        cifm_TREADY = ap_const_logic_0;
    }
}

void dnn_hw::thread_cifm_TREADY_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cifm_TREADY_int = grp_convolution_hw_fu_46_cifm_TREADY.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln738_reg_71.read(), ap_const_lv1_1))) {
        cifm_TREADY_int = grp_pool_hw_fu_38_cifm_TREADY.read();
    } else {
        cifm_TREADY_int = ap_const_logic_0;
    }
}

void dnn_hw::thread_cofm_TDATA_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_convolution_hw_fu_46_cofm_TVALID.read()))) {
        cofm_TDATA_int = grp_convolution_hw_fu_46_cofm_TDATA.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln738_reg_71.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_pool_hw_fu_38_cofm_TVALID.read()))) {
        cofm_TDATA_int = grp_pool_hw_fu_38_cofm_TDATA.read();
    } else {
        cofm_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dnn_hw::thread_cofm_TVALID() {
    cofm_TVALID = regslice_both_cofm_U_vld_out.read();
}

void dnn_hw::thread_cofm_TVALID_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cofm_TVALID_int = grp_convolution_hw_fu_46_cofm_TVALID.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln738_reg_71.read(), ap_const_lv1_1))) {
        cofm_TVALID_int = grp_pool_hw_fu_38_cofm_TVALID.read();
    } else {
        cofm_TVALID_int = ap_const_logic_0;
    }
}

void dnn_hw::thread_config_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        config_r_TDATA_blk_n = config_r_TVALID_int.read();
    } else {
        config_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void dnn_hw::thread_config_r_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, config_r_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_config_r_U_ack_in.read()))) {
        config_r_TREADY = ap_const_logic_1;
    } else {
        config_r_TREADY = ap_const_logic_0;
    }
}

void dnn_hw::thread_config_r_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
        config_r_TREADY_int = ap_const_logic_1;
    } else {
        config_r_TREADY_int = ap_const_logic_0;
    }
}

void dnn_hw::thread_grp_convolution_hw_fu_46_ap_start() {
    grp_convolution_hw_fu_46_ap_start = grp_convolution_hw_fu_46_ap_start_reg.read();
}

void dnn_hw::thread_grp_convolution_hw_fu_46_cofm_TREADY() {
    grp_convolution_hw_fu_46_cofm_TREADY = (ap_CS_fsm_state3.read() & cofm_TREADY_int.read());
}

void dnn_hw::thread_grp_pool_hw_fu_38_ap_start() {
    grp_pool_hw_fu_38_ap_start = grp_pool_hw_fu_38_ap_start_reg.read();
}

void dnn_hw::thread_grp_pool_hw_fu_38_cofm_TREADY() {
    grp_pool_hw_fu_38_cofm_TREADY = (ap_CS_fsm_state2.read() & cofm_TREADY_int.read());
}

void dnn_hw::thread_icmp_ln735_fu_56_p2() {
    icmp_ln735_fu_56_p2 = (!config_r_TDATA_int.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(config_r_TDATA_int.read() == ap_const_lv32_0);
}

void dnn_hw::thread_icmp_ln738_fu_62_p2() {
    icmp_ln738_fu_62_p2 = (!config_r_TDATA_int.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(config_r_TDATA_int.read() == ap_const_lv32_1);
}

void dnn_hw::thread_tran_wgt_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, tran_wgt_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_tran_wgt_U_ack_in.read()))) {
        tran_wgt_TREADY = ap_const_logic_1;
    } else {
        tran_wgt_TREADY = ap_const_logic_0;
    }
}

void dnn_hw::thread_tran_wgt_TREADY_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tran_wgt_TREADY_int = grp_convolution_hw_fu_46_tran_wgt_TREADY.read();
    } else {
        tran_wgt_TREADY_int = ap_const_logic_0;
    }
}

void dnn_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln735_fu_56_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln735_fu_56_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_r_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_convolution_hw_fu_46_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(regslice_both_cofm_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void dnn_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cifm_TDATA\" :  \"" << cifm_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cifm_TVALID\" :  \"" << cifm_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cifm_TREADY\" :  \"" << cifm_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cofm_TDATA\" :  \"" << cofm_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cofm_TVALID\" :  \"" << cofm_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cofm_TREADY\" :  \"" << cofm_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tran_wgt_TDATA\" :  \"" << tran_wgt_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tran_wgt_TVALID\" :  \"" << tran_wgt_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tran_wgt_TREADY\" :  \"" << tran_wgt_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"config_r_TDATA\" :  \"" << config_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"config_r_TVALID\" :  \"" << config_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"config_r_TREADY\" :  \"" << config_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

