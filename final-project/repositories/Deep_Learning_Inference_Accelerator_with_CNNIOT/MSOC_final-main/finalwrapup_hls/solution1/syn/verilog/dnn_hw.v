// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dnn_hw,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685000,HLS_SYN_LAT=2289718,HLS_SYN_TPT=none,HLS_SYN_MEM=288,HLS_SYN_DSP=10,HLS_SYN_FF=17629,HLS_SYN_LUT=43311,HLS_VERSION=2019_2}" *)

module dnn_hw (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cifm_TDATA,
        cifm_TVALID,
        cifm_TREADY,
        cofm_TDATA,
        cofm_TVALID,
        cofm_TREADY,
        tran_wgt_TDATA,
        tran_wgt_TVALID,
        tran_wgt_TREADY,
        config_r_TDATA,
        config_r_TVALID,
        config_r_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cifm_TDATA;
input   cifm_TVALID;
output   cifm_TREADY;
output  [511:0] cofm_TDATA;
output   cofm_TVALID;
input   cofm_TREADY;
input  [511:0] tran_wgt_TDATA;
input   tran_wgt_TVALID;
output   tran_wgt_TREADY;
input  [31:0] config_r_TDATA;
input   config_r_TVALID;
output   config_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cifm_TREADY;
reg tran_wgt_TREADY;
reg config_r_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    config_r_TDATA_blk_n;
wire   [0:0] icmp_ln738_fu_62_p2;
reg   [0:0] icmp_ln738_reg_71;
reg    ap_block_state1;
wire   [0:0] icmp_ln735_fu_56_p2;
wire    grp_pool_hw_fu_38_ap_start;
wire    grp_pool_hw_fu_38_ap_done;
wire    grp_pool_hw_fu_38_ap_idle;
wire    grp_pool_hw_fu_38_ap_ready;
wire    grp_pool_hw_fu_38_cifm_TREADY;
wire   [511:0] grp_pool_hw_fu_38_cofm_TDATA;
wire    grp_pool_hw_fu_38_cofm_TVALID;
wire    grp_pool_hw_fu_38_cofm_TREADY;
wire    grp_convolution_hw_fu_46_ap_start;
wire    grp_convolution_hw_fu_46_ap_done;
wire    grp_convolution_hw_fu_46_ap_idle;
wire    grp_convolution_hw_fu_46_ap_ready;
wire    grp_convolution_hw_fu_46_cifm_TREADY;
wire   [511:0] grp_convolution_hw_fu_46_cofm_TDATA;
wire    grp_convolution_hw_fu_46_cofm_TVALID;
wire    grp_convolution_hw_fu_46_cofm_TREADY;
wire    grp_convolution_hw_fu_46_tran_wgt_TREADY;
reg    grp_pool_hw_fu_38_ap_start_reg;
reg    ap_block_state1_ignore_call0;
wire    ap_CS_fsm_state2;
reg    grp_convolution_hw_fu_46_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    regslice_both_cofm_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
wire    regslice_both_cifm_U_apdone_blk;
wire   [511:0] cifm_TDATA_int;
wire    cifm_TVALID_int;
reg    cifm_TREADY_int;
wire    regslice_both_cifm_U_ack_in;
reg   [511:0] cofm_TDATA_int;
reg    cofm_TVALID_int;
wire    cofm_TREADY_int;
wire    regslice_both_cofm_U_vld_out;
wire    regslice_both_tran_wgt_U_apdone_blk;
wire   [511:0] tran_wgt_TDATA_int;
wire    tran_wgt_TVALID_int;
reg    tran_wgt_TREADY_int;
wire    regslice_both_tran_wgt_U_ack_in;
wire    regslice_both_config_r_U_apdone_blk;
wire   [31:0] config_r_TDATA_int;
wire    config_r_TVALID_int;
reg    config_r_TREADY_int;
wire    regslice_both_config_r_U_ack_in;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_pool_hw_fu_38_ap_start_reg = 1'b0;
#0 grp_convolution_hw_fu_46_ap_start_reg = 1'b0;
end

pool_hw grp_pool_hw_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pool_hw_fu_38_ap_start),
    .ap_done(grp_pool_hw_fu_38_ap_done),
    .ap_idle(grp_pool_hw_fu_38_ap_idle),
    .ap_ready(grp_pool_hw_fu_38_ap_ready),
    .cifm_TDATA(cifm_TDATA_int),
    .cifm_TVALID(cifm_TVALID_int),
    .cifm_TREADY(grp_pool_hw_fu_38_cifm_TREADY),
    .cofm_TDATA(grp_pool_hw_fu_38_cofm_TDATA),
    .cofm_TVALID(grp_pool_hw_fu_38_cofm_TVALID),
    .cofm_TREADY(grp_pool_hw_fu_38_cofm_TREADY)
);

convolution_hw grp_convolution_hw_fu_46(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_hw_fu_46_ap_start),
    .ap_done(grp_convolution_hw_fu_46_ap_done),
    .ap_idle(grp_convolution_hw_fu_46_ap_idle),
    .ap_ready(grp_convolution_hw_fu_46_ap_ready),
    .cifm_TDATA(cifm_TDATA_int),
    .cifm_TVALID(cifm_TVALID_int),
    .cifm_TREADY(grp_convolution_hw_fu_46_cifm_TREADY),
    .cofm_TDATA(grp_convolution_hw_fu_46_cofm_TDATA),
    .cofm_TVALID(grp_convolution_hw_fu_46_cofm_TVALID),
    .cofm_TREADY(grp_convolution_hw_fu_46_cofm_TREADY),
    .tran_wgt_TDATA(tran_wgt_TDATA_int),
    .tran_wgt_TVALID(tran_wgt_TVALID_int),
    .tran_wgt_TREADY(grp_convolution_hw_fu_46_tran_wgt_TREADY)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_cifm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(cifm_TDATA),
    .vld_in(cifm_TVALID),
    .ack_in(regslice_both_cifm_U_ack_in),
    .data_out(cifm_TDATA_int),
    .vld_out(cifm_TVALID_int),
    .ack_out(cifm_TREADY_int),
    .apdone_blk(regslice_both_cifm_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_cofm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(cofm_TDATA_int),
    .vld_in(cofm_TVALID_int),
    .ack_in(cofm_TREADY_int),
    .data_out(cofm_TDATA),
    .vld_out(regslice_both_cofm_U_vld_out),
    .ack_out(cofm_TREADY),
    .apdone_blk(regslice_both_cofm_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_tran_wgt_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tran_wgt_TDATA),
    .vld_in(tran_wgt_TVALID),
    .ack_in(regslice_both_tran_wgt_U_ack_in),
    .data_out(tran_wgt_TDATA_int),
    .vld_out(tran_wgt_TVALID_int),
    .ack_out(tran_wgt_TREADY_int),
    .apdone_blk(regslice_both_tran_wgt_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_config_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(config_r_TDATA),
    .vld_in(config_r_TVALID),
    .ack_in(regslice_both_config_r_U_ack_in),
    .data_out(config_r_TDATA_int),
    .vld_out(config_r_TVALID_int),
    .ack_out(config_r_TREADY_int),
    .apdone_blk(regslice_both_config_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution_hw_fu_46_ap_start_reg <= 1'b0;
    end else begin
        if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (icmp_ln735_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_convolution_hw_fu_46_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_hw_fu_46_ap_ready == 1'b1)) begin
            grp_convolution_hw_fu_46_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pool_hw_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (icmp_ln735_fu_56_p2 == 1'd0) & (icmp_ln738_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_pool_hw_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_pool_hw_fu_38_ap_ready == 1'b1)) begin
            grp_pool_hw_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (icmp_ln735_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln738_reg_71 <= icmp_ln738_fu_62_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_cofm_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_cofm_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cifm_TVALID == 1'b1) & (regslice_both_cifm_U_ack_in == 1'b1))) begin
        cifm_TREADY = 1'b1;
    end else begin
        cifm_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cifm_TREADY_int = grp_convolution_hw_fu_46_cifm_TREADY;
    end else if (((icmp_ln738_reg_71 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cifm_TREADY_int = grp_pool_hw_fu_38_cifm_TREADY;
    end else begin
        cifm_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((grp_convolution_hw_fu_46_cofm_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        cofm_TDATA_int = grp_convolution_hw_fu_46_cofm_TDATA;
    end else if (((icmp_ln738_reg_71 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_pool_hw_fu_38_cofm_TVALID == 1'b1))) begin
        cofm_TDATA_int = grp_pool_hw_fu_38_cofm_TDATA;
    end else begin
        cofm_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cofm_TVALID_int = grp_convolution_hw_fu_46_cofm_TVALID;
    end else if (((icmp_ln738_reg_71 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cofm_TVALID_int = grp_pool_hw_fu_38_cofm_TVALID;
    end else begin
        cofm_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        config_r_TDATA_blk_n = config_r_TVALID_int;
    end else begin
        config_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((config_r_TVALID == 1'b1) & (regslice_both_config_r_U_ack_in == 1'b1))) begin
        config_r_TREADY = 1'b1;
    end else begin
        config_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_r_TREADY_int = 1'b1;
    end else begin
        config_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((tran_wgt_TVALID == 1'b1) & (regslice_both_tran_wgt_U_ack_in == 1'b1))) begin
        tran_wgt_TREADY = 1'b1;
    end else begin
        tran_wgt_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tran_wgt_TREADY_int = grp_convolution_hw_fu_46_tran_wgt_TREADY;
    end else begin
        tran_wgt_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (icmp_ln735_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (icmp_ln735_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_convolution_hw_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_cofm_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((config_r_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((icmp_ln738_reg_71 == 1'd1) & (grp_pool_hw_fu_38_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cofm_TVALID = regslice_both_cofm_U_vld_out;

assign grp_convolution_hw_fu_46_ap_start = grp_convolution_hw_fu_46_ap_start_reg;

assign grp_convolution_hw_fu_46_cofm_TREADY = (cofm_TREADY_int & ap_CS_fsm_state3);

assign grp_pool_hw_fu_38_ap_start = grp_pool_hw_fu_38_ap_start_reg;

assign grp_pool_hw_fu_38_cofm_TREADY = (cofm_TREADY_int & ap_CS_fsm_state2);

assign icmp_ln735_fu_56_p2 = ((config_r_TDATA_int == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln738_fu_62_p2 = ((config_r_TDATA_int == 32'd1) ? 1'b1 : 1'b0);

endmodule //dnn_hw
