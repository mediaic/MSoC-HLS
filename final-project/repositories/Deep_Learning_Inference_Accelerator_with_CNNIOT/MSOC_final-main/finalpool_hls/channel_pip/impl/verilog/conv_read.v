// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_read (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cofm_i_TDATA,
        cofm_i_TVALID,
        cofm_i_TREADY,
        cofm_o_TDATA,
        cofm_o_TVALID,
        cofm_o_TREADY,
        ofm_buff0_0_address0,
        ofm_buff0_0_ce0,
        ofm_buff0_0_q0,
        ofm_buff0_1_address0,
        ofm_buff0_1_ce0,
        ofm_buff0_1_q0,
        ofm_buff0_2_address0,
        ofm_buff0_2_ce0,
        ofm_buff0_2_q0,
        ofm_buff0_3_address0,
        ofm_buff0_3_ce0,
        ofm_buff0_3_q0,
        ofm_buff0_4_address0,
        ofm_buff0_4_ce0,
        ofm_buff0_4_q0,
        ofm_buff0_5_address0,
        ofm_buff0_5_ce0,
        ofm_buff0_5_q0,
        cofm_counter_read,
        enable,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cofm_i_TDATA;
input   cofm_i_TVALID;
output   cofm_i_TREADY;
output  [511:0] cofm_o_TDATA;
output   cofm_o_TVALID;
input   cofm_o_TREADY;
output  [5:0] ofm_buff0_0_address0;
output   ofm_buff0_0_ce0;
input  [31:0] ofm_buff0_0_q0;
output  [5:0] ofm_buff0_1_address0;
output   ofm_buff0_1_ce0;
input  [31:0] ofm_buff0_1_q0;
output  [5:0] ofm_buff0_2_address0;
output   ofm_buff0_2_ce0;
input  [31:0] ofm_buff0_2_q0;
output  [5:0] ofm_buff0_3_address0;
output   ofm_buff0_3_ce0;
input  [31:0] ofm_buff0_3_q0;
output  [5:0] ofm_buff0_4_address0;
output   ofm_buff0_4_ce0;
input  [31:0] ofm_buff0_4_q0;
output  [5:0] ofm_buff0_5_address0;
output   ofm_buff0_5_ce0;
input  [31:0] ofm_buff0_5_q0;
input  [31:0] cofm_counter_read;
input   enable;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cofm_i_TREADY;
reg cofm_o_TVALID;
reg ofm_buff0_0_ce0;
reg ofm_buff0_1_ce0;
reg ofm_buff0_2_ce0;
reg ofm_buff0_3_ce0;
reg ofm_buff0_4_ce0;
reg ofm_buff0_5_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cofm_TDATA_i_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln221_reg_285;
reg    cofm_TDATA_o_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [5:0] j_0_reg_171;
wire   [0:0] enable_read_read_fu_68_p2;
wire   [31:0] add_ln221_fu_191_p2;
reg   [31:0] add_ln221_reg_280;
wire   [0:0] icmp_ln221_fu_197_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] j_fu_203_p2;
reg   [5:0] j_reg_289;
wire   [511:0] cofm_b5_addr1516_par_fu_259_p5;
reg   [511:0] cofm_b5_addr1516_par_reg_324;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [5:0] ap_phi_mux_j_0_phi_fu_175_p4;
reg   [31:0] cofm_counter_1_reg_182;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln224_fu_209_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln229_fu_239_p1;
wire   [31:0] bitcast_ln228_fu_235_p1;
wire   [31:0] bitcast_ln227_fu_231_p1;
wire   [31:0] bitcast_ln226_fu_227_p1;
wire   [31:0] bitcast_ln225_fu_223_p1;
wire   [31:0] bitcast_ln224_fu_219_p1;
wire   [191:0] tmp_3_fu_243_p7;
reg   [31:0] ap_return_preg;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_68_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_68_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_preg <= cofm_counter_1_reg_182;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cofm_counter_1_reg_182 <= add_ln221_reg_280;
    end else if (((enable_read_read_fu_68_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cofm_counter_1_reg_182 <= cofm_counter_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_68_p2 == 1'd1))) begin
        j_0_reg_171 <= 6'd0;
    end else if (((icmp_ln221_reg_285 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_171 <= j_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_68_p2 == 1'd1))) begin
        add_ln221_reg_280 <= add_ln221_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_reg_285 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        cofm_b5_addr1516_par_reg_324 <= cofm_b5_addr1516_par_fu_259_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln221_reg_285 <= icmp_ln221_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_289 <= j_fu_203_p2;
    end
end

always @ (*) begin
    if ((icmp_ln221_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln221_reg_285 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_175_p4 = j_reg_289;
    end else begin
        ap_phi_mux_j_0_phi_fu_175_p4 = j_0_reg_171;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return = cofm_counter_1_reg_182;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_285 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cofm_TDATA_i_blk_n = cofm_i_TVALID;
    end else begin
        cofm_TDATA_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln221_reg_285 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cofm_TDATA_o_blk_n = cofm_o_TREADY;
    end else begin
        cofm_TDATA_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_285 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        cofm_i_TREADY = 1'b1;
    end else begin
        cofm_i_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_285 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cofm_o_TVALID = 1'b1;
    end else begin
        cofm_o_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_0_ce0 = 1'b1;
    end else begin
        ofm_buff0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_1_ce0 = 1'b1;
    end else begin
        ofm_buff0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_2_ce0 = 1'b1;
    end else begin
        ofm_buff0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_3_ce0 = 1'b1;
    end else begin
        ofm_buff0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_4_ce0 = 1'b1;
    end else begin
        ofm_buff0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ofm_buff0_5_ce0 = 1'b1;
    end else begin
        ofm_buff0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_68_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((enable_read_read_fu_68_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln221_fu_197_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln221_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln221_fu_191_p2 = (cofm_counter_read + 32'd56);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln221_reg_285 == 1'd0) & (cofm_i_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln221_reg_285 == 1'd0) & (cofm_i_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln221_reg_285 == 1'd0) & (cofm_i_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln221_reg_285 == 1'd0) & (cofm_o_TREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln224_fu_219_p1 = ofm_buff0_0_q0;

assign bitcast_ln225_fu_223_p1 = ofm_buff0_1_q0;

assign bitcast_ln226_fu_227_p1 = ofm_buff0_2_q0;

assign bitcast_ln227_fu_231_p1 = ofm_buff0_3_q0;

assign bitcast_ln228_fu_235_p1 = ofm_buff0_4_q0;

assign bitcast_ln229_fu_239_p1 = ofm_buff0_5_q0;

assign cofm_b5_addr1516_par_fu_259_p5 = {{cofm_i_TDATA[511:192]}, {tmp_3_fu_243_p7}};

assign cofm_o_TDATA = cofm_b5_addr1516_par_reg_324;

assign enable_read_read_fu_68_p2 = enable;

assign icmp_ln221_fu_197_p2 = ((ap_phi_mux_j_0_phi_fu_175_p4 == 6'd56) ? 1'b1 : 1'b0);

assign j_fu_203_p2 = (ap_phi_mux_j_0_phi_fu_175_p4 + 6'd1);

assign ofm_buff0_0_address0 = zext_ln224_fu_209_p1;

assign ofm_buff0_1_address0 = zext_ln224_fu_209_p1;

assign ofm_buff0_2_address0 = zext_ln224_fu_209_p1;

assign ofm_buff0_3_address0 = zext_ln224_fu_209_p1;

assign ofm_buff0_4_address0 = zext_ln224_fu_209_p1;

assign ofm_buff0_5_address0 = zext_ln224_fu_209_p1;

assign tmp_3_fu_243_p7 = {{{{{{bitcast_ln229_fu_239_p1}, {bitcast_ln228_fu_235_p1}}, {bitcast_ln227_fu_231_p1}}, {bitcast_ln226_fu_227_p1}}, {bitcast_ln225_fu_223_p1}}, {bitcast_ln224_fu_219_p1}};

assign zext_ln224_fu_209_p1 = ap_phi_mux_j_0_phi_fu_175_p4;

endmodule //conv_read
