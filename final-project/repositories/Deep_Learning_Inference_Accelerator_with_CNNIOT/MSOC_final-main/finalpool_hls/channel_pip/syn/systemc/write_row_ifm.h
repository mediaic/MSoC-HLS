// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_row_ifm_HH_
#define _write_row_ifm_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct write_row_ifm : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<512> > cifm_TDATA;
    sc_in< sc_logic > cifm_TVALID;
    sc_out< sc_logic > cifm_TREADY;
    sc_out< sc_lv<6> > ifm_buff0_0_address0;
    sc_out< sc_logic > ifm_buff0_0_ce0;
    sc_out< sc_logic > ifm_buff0_0_we0;
    sc_out< sc_lv<32> > ifm_buff0_0_d0;
    sc_out< sc_lv<6> > ifm_buff0_1_address0;
    sc_out< sc_logic > ifm_buff0_1_ce0;
    sc_out< sc_logic > ifm_buff0_1_we0;
    sc_out< sc_lv<32> > ifm_buff0_1_d0;
    sc_out< sc_lv<6> > ifm_buff0_2_address0;
    sc_out< sc_logic > ifm_buff0_2_ce0;
    sc_out< sc_logic > ifm_buff0_2_we0;
    sc_out< sc_lv<32> > ifm_buff0_2_d0;
    sc_in< sc_lv<32> > cifm_counter_read;
    sc_in< sc_logic > enable;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    write_row_ifm(sc_module_name name);
    SC_HAS_PROCESS(write_row_ifm);

    ~write_row_ifm();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > cifm_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln83_fu_147_p2;
    sc_signal< sc_lv<1> > enable_read_read_fu_64_p2;
    sc_signal< sc_lv<32> > add_ln83_fu_141_p2;
    sc_signal< sc_lv<32> > add_ln83_reg_214;
    sc_signal< sc_lv<6> > j_fu_153_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<6> > j_0_reg_121;
    sc_signal< sc_lv<32> > ap_phi_mux_cifm_counter_1_phi_fu_135_p4;
    sc_signal< sc_lv<32> > cifm_counter_1_reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln86_fu_168_p1;
    sc_signal< sc_lv<32> > trunc_ln86_fu_159_p1;
    sc_signal< sc_lv<32> > cifm_a1_load_new6_fu_175_p4;
    sc_signal< sc_lv<32> > cifm_a2_load_new_fu_190_p4;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3A;
    static const sc_lv<6> ap_const_lv6_3A;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln83_fu_141_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_cifm_counter_1_phi_fu_135_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cifm_TDATA_blk_n();
    void thread_cifm_TREADY();
    void thread_cifm_a1_load_new6_fu_175_p4();
    void thread_cifm_a2_load_new_fu_190_p4();
    void thread_enable_read_read_fu_64_p2();
    void thread_icmp_ln83_fu_147_p2();
    void thread_ifm_buff0_0_address0();
    void thread_ifm_buff0_0_ce0();
    void thread_ifm_buff0_0_d0();
    void thread_ifm_buff0_0_we0();
    void thread_ifm_buff0_1_address0();
    void thread_ifm_buff0_1_ce0();
    void thread_ifm_buff0_1_d0();
    void thread_ifm_buff0_1_we0();
    void thread_ifm_buff0_2_address0();
    void thread_ifm_buff0_2_ce0();
    void thread_ifm_buff0_2_d0();
    void thread_ifm_buff0_2_we0();
    void thread_j_fu_153_p2();
    void thread_trunc_ln86_fu_159_p1();
    void thread_zext_ln86_fu_168_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
