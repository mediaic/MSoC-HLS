-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_cifm_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cifm_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    cifm_TVALID : IN STD_LOGIC;
    cifm_TREADY : OUT STD_LOGIC;
    ifm_buff0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_0_ce0 : OUT STD_LOGIC;
    ifm_buff0_0_we0 : OUT STD_LOGIC;
    ifm_buff0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_1_ce0 : OUT STD_LOGIC;
    ifm_buff0_1_we0 : OUT STD_LOGIC;
    ifm_buff0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_2_ce0 : OUT STD_LOGIC;
    ifm_buff0_2_we0 : OUT STD_LOGIC;
    ifm_buff0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_3_ce0 : OUT STD_LOGIC;
    ifm_buff0_3_we0 : OUT STD_LOGIC;
    ifm_buff0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_4_ce0 : OUT STD_LOGIC;
    ifm_buff0_4_we0 : OUT STD_LOGIC;
    ifm_buff0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_5_ce0 : OUT STD_LOGIC;
    ifm_buff0_5_we0 : OUT STD_LOGIC;
    ifm_buff0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_6_ce0 : OUT STD_LOGIC;
    ifm_buff0_6_we0 : OUT STD_LOGIC;
    ifm_buff0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_7_ce0 : OUT STD_LOGIC;
    ifm_buff0_7_we0 : OUT STD_LOGIC;
    ifm_buff0_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_8_ce0 : OUT STD_LOGIC;
    ifm_buff0_8_we0 : OUT STD_LOGIC;
    ifm_buff0_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_9_ce0 : OUT STD_LOGIC;
    ifm_buff0_9_we0 : OUT STD_LOGIC;
    ifm_buff0_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_10_ce0 : OUT STD_LOGIC;
    ifm_buff0_10_we0 : OUT STD_LOGIC;
    ifm_buff0_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_11_ce0 : OUT STD_LOGIC;
    ifm_buff0_11_we0 : OUT STD_LOGIC;
    ifm_buff0_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_12_ce0 : OUT STD_LOGIC;
    ifm_buff0_12_we0 : OUT STD_LOGIC;
    ifm_buff0_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_13_ce0 : OUT STD_LOGIC;
    ifm_buff0_13_we0 : OUT STD_LOGIC;
    ifm_buff0_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_14_ce0 : OUT STD_LOGIC;
    ifm_buff0_14_we0 : OUT STD_LOGIC;
    ifm_buff0_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff0_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff0_15_ce0 : OUT STD_LOGIC;
    ifm_buff0_15_we0 : OUT STD_LOGIC;
    ifm_buff0_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_0_ce0 : OUT STD_LOGIC;
    ifm_buff1_0_we0 : OUT STD_LOGIC;
    ifm_buff1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_1_ce0 : OUT STD_LOGIC;
    ifm_buff1_1_we0 : OUT STD_LOGIC;
    ifm_buff1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_2_ce0 : OUT STD_LOGIC;
    ifm_buff1_2_we0 : OUT STD_LOGIC;
    ifm_buff1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_3_ce0 : OUT STD_LOGIC;
    ifm_buff1_3_we0 : OUT STD_LOGIC;
    ifm_buff1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_4_ce0 : OUT STD_LOGIC;
    ifm_buff1_4_we0 : OUT STD_LOGIC;
    ifm_buff1_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_5_ce0 : OUT STD_LOGIC;
    ifm_buff1_5_we0 : OUT STD_LOGIC;
    ifm_buff1_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_6_ce0 : OUT STD_LOGIC;
    ifm_buff1_6_we0 : OUT STD_LOGIC;
    ifm_buff1_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_7_ce0 : OUT STD_LOGIC;
    ifm_buff1_7_we0 : OUT STD_LOGIC;
    ifm_buff1_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_8_ce0 : OUT STD_LOGIC;
    ifm_buff1_8_we0 : OUT STD_LOGIC;
    ifm_buff1_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_9_ce0 : OUT STD_LOGIC;
    ifm_buff1_9_we0 : OUT STD_LOGIC;
    ifm_buff1_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_10_ce0 : OUT STD_LOGIC;
    ifm_buff1_10_we0 : OUT STD_LOGIC;
    ifm_buff1_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_11_ce0 : OUT STD_LOGIC;
    ifm_buff1_11_we0 : OUT STD_LOGIC;
    ifm_buff1_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_12_ce0 : OUT STD_LOGIC;
    ifm_buff1_12_we0 : OUT STD_LOGIC;
    ifm_buff1_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_13_ce0 : OUT STD_LOGIC;
    ifm_buff1_13_we0 : OUT STD_LOGIC;
    ifm_buff1_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_14_ce0 : OUT STD_LOGIC;
    ifm_buff1_14_we0 : OUT STD_LOGIC;
    ifm_buff1_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ifm_buff1_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ifm_buff1_15_ce0 : OUT STD_LOGIC;
    ifm_buff1_15_we0 : OUT STD_LOGIC;
    ifm_buff1_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_cifm_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cifm_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln9_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln32_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_766_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal j_1_fu_882_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal cifm_counter_0_reg_588 : STD_LOGIC_VECTOR (5 downto 0);
    signal j1_0_reg_599 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln12_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln12_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_610_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_620_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_630_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_650_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_670_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_680_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_690_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_700_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_710_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_720_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_730_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_740_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_750_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cifm_counter_0_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                cifm_counter_0_reg_588 <= j_fu_766_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cifm_counter_0_reg_588 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j1_0_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j1_0_reg_599 <= ap_const_lv6_0;
            elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j1_0_reg_599 <= j_1_fu_882_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(cifm_TVALID, icmp_ln9_fu_760_p2)
    begin
                ap_block_state2 <= ((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0));
    end process;


    ap_block_state4_assign_proc : process(cifm_TVALID, icmp_ln32_fu_876_p2)
    begin
                ap_block_state4 <= ((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cifm_TDATA_blk_n_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((((icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            cifm_TDATA_blk_n <= cifm_TVALID;
        else 
            cifm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cifm_TREADY_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if (((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            cifm_TREADY <= ap_const_logic_1;
        else 
            cifm_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_610_p4 <= cifm_TDATA(63 downto 32);
    grp_fu_620_p4 <= cifm_TDATA(95 downto 64);
    grp_fu_630_p4 <= cifm_TDATA(127 downto 96);
    grp_fu_640_p4 <= cifm_TDATA(159 downto 128);
    grp_fu_650_p4 <= cifm_TDATA(191 downto 160);
    grp_fu_660_p4 <= cifm_TDATA(223 downto 192);
    grp_fu_670_p4 <= cifm_TDATA(255 downto 224);
    grp_fu_680_p4 <= cifm_TDATA(287 downto 256);
    grp_fu_690_p4 <= cifm_TDATA(319 downto 288);
    grp_fu_700_p4 <= cifm_TDATA(351 downto 320);
    grp_fu_710_p4 <= cifm_TDATA(383 downto 352);
    grp_fu_720_p4 <= cifm_TDATA(415 downto 384);
    grp_fu_730_p4 <= cifm_TDATA(447 downto 416);
    grp_fu_740_p4 <= cifm_TDATA(479 downto 448);
    grp_fu_750_p4 <= cifm_TDATA(511 downto 480);
    icmp_ln32_fu_876_p2 <= "1" when (j1_0_reg_599 = ap_const_lv6_3A) else "0";
    icmp_ln9_fu_760_p2 <= "1" when (cifm_counter_0_reg_588 = ap_const_lv6_3A) else "0";
    ifm_buff0_0_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_0_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_0_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_0_d0 <= trunc_ln12_fu_792_p1;

    ifm_buff0_0_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_0_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_10_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_10_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_10_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_10_d0 <= grp_fu_700_p4;

    ifm_buff0_10_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_10_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_11_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_11_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_11_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_11_d0 <= grp_fu_710_p4;

    ifm_buff0_11_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_11_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_12_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_12_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_12_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_12_d0 <= grp_fu_720_p4;

    ifm_buff0_12_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_12_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_13_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_13_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_13_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_13_d0 <= grp_fu_730_p4;

    ifm_buff0_13_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_13_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_14_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_14_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_14_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_14_d0 <= grp_fu_740_p4;

    ifm_buff0_14_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_14_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_15_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_15_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_15_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_15_d0 <= grp_fu_750_p4;

    ifm_buff0_15_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_15_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_1_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_1_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_1_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_1_d0 <= grp_fu_610_p4;

    ifm_buff0_1_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_1_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_2_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_2_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_2_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_2_d0 <= grp_fu_620_p4;

    ifm_buff0_2_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_2_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_3_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_3_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_3_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_3_d0 <= grp_fu_630_p4;

    ifm_buff0_3_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_3_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_4_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_4_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_4_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_4_d0 <= grp_fu_640_p4;

    ifm_buff0_4_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_4_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_5_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_5_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_5_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_5_d0 <= grp_fu_650_p4;

    ifm_buff0_5_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_5_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_6_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_6_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_6_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_6_d0 <= grp_fu_660_p4;

    ifm_buff0_6_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_6_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_7_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_7_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_7_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_7_d0 <= grp_fu_670_p4;

    ifm_buff0_7_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_7_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_8_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_8_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_8_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_8_d0 <= grp_fu_680_p4;

    ifm_buff0_8_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_8_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_9_address0 <= zext_ln12_fu_772_p1(6 - 1 downto 0);

    ifm_buff0_9_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_9_ce0 <= ap_const_logic_1;
        else 
            ifm_buff0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff0_9_d0 <= grp_fu_690_p4;

    ifm_buff0_9_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state2, icmp_ln9_fu_760_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0))) and (icmp_ln9_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ifm_buff0_9_we0 <= ap_const_logic_1;
        else 
            ifm_buff0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_0_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_0_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_0_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_0_d0 <= trunc_ln35_fu_888_p1;

    ifm_buff1_0_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_0_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_10_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_10_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_10_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_10_d0 <= grp_fu_700_p4;

    ifm_buff1_10_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_10_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_11_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_11_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_11_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_11_d0 <= grp_fu_710_p4;

    ifm_buff1_11_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_11_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_12_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_12_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_12_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_12_d0 <= grp_fu_720_p4;

    ifm_buff1_12_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_12_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_13_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_13_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_13_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_13_d0 <= grp_fu_730_p4;

    ifm_buff1_13_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_13_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_14_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_14_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_14_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_14_d0 <= grp_fu_740_p4;

    ifm_buff1_14_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_14_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_15_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_15_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_15_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_15_d0 <= grp_fu_750_p4;

    ifm_buff1_15_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_15_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_1_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_1_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_1_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_1_d0 <= grp_fu_610_p4;

    ifm_buff1_1_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_1_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_2_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_2_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_2_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_2_d0 <= grp_fu_620_p4;

    ifm_buff1_2_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_2_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_3_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_3_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_3_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_3_d0 <= grp_fu_630_p4;

    ifm_buff1_3_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_3_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_4_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_4_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_4_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_4_d0 <= grp_fu_640_p4;

    ifm_buff1_4_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_4_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_5_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_5_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_5_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_5_d0 <= grp_fu_650_p4;

    ifm_buff1_5_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_5_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_6_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_6_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_6_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_6_d0 <= grp_fu_660_p4;

    ifm_buff1_6_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_6_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_7_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_7_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_7_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_7_d0 <= grp_fu_670_p4;

    ifm_buff1_7_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_7_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_8_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_8_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_8_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_8_d0 <= grp_fu_680_p4;

    ifm_buff1_8_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_8_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_9_address0 <= zext_ln35_fu_897_p1(6 - 1 downto 0);

    ifm_buff1_9_ce0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_9_ce0 <= ap_const_logic_1;
        else 
            ifm_buff1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ifm_buff1_9_d0 <= grp_fu_690_p4;

    ifm_buff1_9_we0_assign_proc : process(cifm_TVALID, ap_CS_fsm_state4, icmp_ln32_fu_876_p2)
    begin
        if ((not(((cifm_TVALID = ap_const_logic_0) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0))) and (icmp_ln32_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ifm_buff1_9_we0 <= ap_const_logic_1;
        else 
            ifm_buff1_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_882_p2 <= std_logic_vector(unsigned(j1_0_reg_599) + unsigned(ap_const_lv6_1));
    j_fu_766_p2 <= std_logic_vector(unsigned(cifm_counter_0_reg_588) + unsigned(ap_const_lv6_1));
    trunc_ln12_fu_792_p1 <= cifm_TDATA(32 - 1 downto 0);
    trunc_ln35_fu_888_p1 <= cifm_TDATA(32 - 1 downto 0);
    zext_ln12_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cifm_counter_0_reg_588),64));
    zext_ln35_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_599),64));
end behav;
