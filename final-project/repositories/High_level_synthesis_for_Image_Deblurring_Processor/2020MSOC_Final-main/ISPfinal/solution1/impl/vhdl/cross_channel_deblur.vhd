-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cross_channel_deblur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Img_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Img_ce0 : OUT STD_LOGIC;
    Img_we0 : OUT STD_LOGIC;
    Img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    adjChImg_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg_ce0 : OUT STD_LOGIC;
    adjChImg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    adjChImg_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg_ce1 : OUT STD_LOGIC;
    adjChImg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    adjChImg2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg2_ce0 : OUT STD_LOGIC;
    adjChImg2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    adjChImg2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg2_ce1 : OUT STD_LOGIC;
    adjChImg2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    coe_a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_real_ce0 : OUT STD_LOGIC;
    coe_a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coe_a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_imag_ce0 : OUT STD_LOGIC;
    coe_a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coe_b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_b_ce0 : OUT STD_LOGIC;
    coe_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cross_channel_deblur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln63_fu_403_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln68_1_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln63_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_484_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_585 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln85_fu_496_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln85_reg_593 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln90_1_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln90_1_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln85_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln90_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_1_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_load_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal x_old_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_old_load_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal x_bar_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_bar_ce0 : STD_LOGIC;
    signal x_bar_we0 : STD_LOGIC;
    signal x_bar_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_bar_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_bar_ce1 : STD_LOGIC;
    signal x_bar_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_old_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_old_ce0 : STD_LOGIC;
    signal x_old_we0 : STD_LOGIC;
    signal x_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_2_ce0 : STD_LOGIC;
    signal x_2_we0 : STD_LOGIC;
    signal x_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_1_ce0 : STD_LOGIC;
    signal y_1_we0 : STD_LOGIC;
    signal y_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_2_ce0 : STD_LOGIC;
    signal y_2_we0 : STD_LOGIC;
    signal y_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_ce1 : STD_LOGIC;
    signal y_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_3_ce0 : STD_LOGIC;
    signal y_3_we0 : STD_LOGIC;
    signal y_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_ce1 : STD_LOGIC;
    signal y_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_4_ce0 : STD_LOGIC;
    signal y_4_we0 : STD_LOGIC;
    signal y_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_ce1 : STD_LOGIC;
    signal y_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_5_ce0 : STD_LOGIC;
    signal y_5_we0 : STD_LOGIC;
    signal y_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_ce1 : STD_LOGIC;
    signal y_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_6_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_6_ce0 : STD_LOGIC;
    signal y_6_we0 : STD_LOGIC;
    signal y_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_7_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_7_ce0 : STD_LOGIC;
    signal y_7_we0 : STD_LOGIC;
    signal y_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_7_ce1 : STD_LOGIC;
    signal y_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_8_ce0 : STD_LOGIC;
    signal y_8_we0 : STD_LOGIC;
    signal y_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_9_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_9_ce0 : STD_LOGIC;
    signal y_9_we0 : STD_LOGIC;
    signal y_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_9_ce1 : STD_LOGIC;
    signal y_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_ap_start : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_ap_done : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_ap_idle : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_ap_ready : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_f_n_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_f_n_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_f_n_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_f_n_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_f_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_f_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_f_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_f_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_adjChImg_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_adjChImg_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_adjChImg_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_adjChImg_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_adjChImg2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_adjChImg2_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_adjChImg2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_adjChImg2_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g1_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g1_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g2_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g2_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g2_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g3_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g3_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g3_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g3_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g4_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g4_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g4_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g4_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g5_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g5_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g5_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g5_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g5_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g6_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g6_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g6_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g7_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g7_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g7_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g7_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g7_ce1 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g8_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g8_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g8_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g9_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g9_ce0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g9_we0 : STD_LOGIC;
    signal grp_my_filter_v12_fu_354_g9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_filter_v12_fu_354_g9_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v12_fu_354_g9_ce1 : STD_LOGIC;
    signal grp_ProxGS4_fu_373_ap_start : STD_LOGIC;
    signal grp_ProxGS4_fu_373_ap_done : STD_LOGIC;
    signal grp_ProxGS4_fu_373_ap_idle : STD_LOGIC;
    signal grp_ProxGS4_fu_373_ap_ready : STD_LOGIC;
    signal grp_ProxGS4_fu_373_x_io_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS4_fu_373_x_io_ce0 : STD_LOGIC;
    signal grp_ProxGS4_fu_373_x_io_we0 : STD_LOGIC;
    signal grp_ProxGS4_fu_373_x_io_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ProxGS4_fu_373_coe_a_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS4_fu_373_coe_a_M_real_ce0 : STD_LOGIC;
    signal grp_ProxGS4_fu_373_coe_a_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS4_fu_373_coe_a_M_imag_ce0 : STD_LOGIC;
    signal grp_ProxGS4_fu_373_coe_b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS4_fu_373_coe_b_ce0 : STD_LOGIC;
    signal grp_array_copy3_fu_384_ap_start : STD_LOGIC;
    signal grp_array_copy3_fu_384_ap_done : STD_LOGIC;
    signal grp_array_copy3_fu_384_ap_idle : STD_LOGIC;
    signal grp_array_copy3_fu_384_ap_ready : STD_LOGIC;
    signal grp_array_copy3_fu_384_data_in_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_array_copy3_fu_384_data_in_ce0 : STD_LOGIC;
    signal grp_array_copy3_fu_384_data_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_array_copy3_fu_384_data_out_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_array_copy3_fu_384_data_out_ce0 : STD_LOGIC;
    signal grp_array_copy3_fu_384_data_out_we0 : STD_LOGIC;
    signal grp_array_copy3_fu_384_data_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_277 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_0_i_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvar_flatten11_reg_321 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_0_i_reg_332 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v12_fu_354_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_ProxGS4_fu_373_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_array_copy3_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln105_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln68_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln65_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_437_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln68_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_fu_449_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln66_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln87_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_530_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln90_fu_514_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln90_fu_542_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln88_fu_538_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln90_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component my_filter_v12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_n_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        f_n_ce0 : OUT STD_LOGIC;
        f_n_we0 : OUT STD_LOGIC;
        f_n_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        f_n_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        f_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        f_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        f_ce1 : OUT STD_LOGIC;
        f_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        adjChImg_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg_ce0 : OUT STD_LOGIC;
        adjChImg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        adjChImg_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg_ce1 : OUT STD_LOGIC;
        adjChImg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        adjChImg2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg2_ce0 : OUT STD_LOGIC;
        adjChImg2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        adjChImg2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg2_ce1 : OUT STD_LOGIC;
        adjChImg2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g1_ce0 : OUT STD_LOGIC;
        g1_we0 : OUT STD_LOGIC;
        g1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g2_ce0 : OUT STD_LOGIC;
        g2_we0 : OUT STD_LOGIC;
        g2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g2_ce1 : OUT STD_LOGIC;
        g2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g3_ce0 : OUT STD_LOGIC;
        g3_we0 : OUT STD_LOGIC;
        g3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g3_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g3_ce1 : OUT STD_LOGIC;
        g3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g4_ce0 : OUT STD_LOGIC;
        g4_we0 : OUT STD_LOGIC;
        g4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g4_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g4_ce1 : OUT STD_LOGIC;
        g4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g5_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g5_ce0 : OUT STD_LOGIC;
        g5_we0 : OUT STD_LOGIC;
        g5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g5_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g5_ce1 : OUT STD_LOGIC;
        g5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g6_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g6_ce0 : OUT STD_LOGIC;
        g6_we0 : OUT STD_LOGIC;
        g6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g7_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g7_ce0 : OUT STD_LOGIC;
        g7_we0 : OUT STD_LOGIC;
        g7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g7_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g7_ce1 : OUT STD_LOGIC;
        g7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        g8_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g8_ce0 : OUT STD_LOGIC;
        g8_we0 : OUT STD_LOGIC;
        g8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g9_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g9_ce0 : OUT STD_LOGIC;
        g9_we0 : OUT STD_LOGIC;
        g9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        g9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g9_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g9_ce1 : OUT STD_LOGIC;
        g9_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ProxGS4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_io_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        x_io_ce0 : OUT STD_LOGIC;
        x_io_we0 : OUT STD_LOGIC;
        x_io_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_io_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coe_a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_a_M_real_ce0 : OUT STD_LOGIC;
        coe_a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coe_a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_a_M_imag_ce0 : OUT STD_LOGIC;
        coe_a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coe_b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_b_ce0 : OUT STD_LOGIC;
        coe_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component array_copy3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_in_ce0 : OUT STD_LOGIC;
        data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_out_ce0 : OUT STD_LOGIC;
        data_out_we0 : OUT STD_LOGIC;
        data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_fsub_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cross_channel_debsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ProxGS4_tmp_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_bar_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_bar_address0,
        ce0 => x_bar_ce0,
        we0 => x_bar_we0,
        d0 => x_bar_d0,
        q0 => x_bar_q0,
        address1 => grp_my_filter_v12_fu_354_f_address1,
        ce1 => x_bar_ce1,
        q1 => x_bar_q1);

    x_old_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_old_address0,
        ce0 => x_old_ce0,
        we0 => x_old_we0,
        d0 => grp_array_copy3_fu_384_data_out_d0,
        q0 => x_old_q0);

    x_2_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_2_address0,
        ce0 => x_2_ce0,
        we0 => x_2_we0,
        d0 => x_2_d0,
        q0 => x_2_q0);

    y_1_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_1_address0,
        ce0 => y_1_ce0,
        we0 => y_1_we0,
        d0 => y_1_d0,
        q0 => y_1_q0);

    y_2_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_2_address0,
        ce0 => y_2_ce0,
        we0 => y_2_we0,
        d0 => y_2_d0,
        q0 => y_2_q0,
        address1 => grp_my_filter_v12_fu_354_g2_address1,
        ce1 => y_2_ce1,
        q1 => y_2_q1);

    y_3_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_3_address0,
        ce0 => y_3_ce0,
        we0 => y_3_we0,
        d0 => y_3_d0,
        q0 => y_3_q0,
        address1 => grp_my_filter_v12_fu_354_g3_address1,
        ce1 => y_3_ce1,
        q1 => y_3_q1);

    y_4_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_4_address0,
        ce0 => y_4_ce0,
        we0 => y_4_we0,
        d0 => y_4_d0,
        q0 => y_4_q0,
        address1 => grp_my_filter_v12_fu_354_g4_address1,
        ce1 => y_4_ce1,
        q1 => y_4_q1);

    y_5_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_5_address0,
        ce0 => y_5_ce0,
        we0 => y_5_we0,
        d0 => y_5_d0,
        q0 => y_5_q0,
        address1 => grp_my_filter_v12_fu_354_g5_address1,
        ce1 => y_5_ce1,
        q1 => y_5_q1);

    y_6_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_6_address0,
        ce0 => y_6_ce0,
        we0 => y_6_we0,
        d0 => y_6_d0,
        q0 => y_6_q0);

    y_7_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_7_address0,
        ce0 => y_7_ce0,
        we0 => y_7_we0,
        d0 => y_7_d0,
        q0 => y_7_q0,
        address1 => grp_my_filter_v12_fu_354_g7_address1,
        ce1 => y_7_ce1,
        q1 => y_7_q1);

    y_8_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_8_address0,
        ce0 => y_8_ce0,
        we0 => y_8_we0,
        d0 => y_8_d0,
        q0 => y_8_q0);

    y_9_U : component cross_channel_debsc4
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_9_address0,
        ce0 => y_9_ce0,
        we0 => y_9_we0,
        d0 => y_9_d0,
        q0 => y_9_q0,
        address1 => grp_my_filter_v12_fu_354_g9_address1,
        ce1 => y_9_ce1,
        q1 => y_9_q1);

    grp_my_filter_v12_fu_354 : component my_filter_v12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_my_filter_v12_fu_354_ap_start,
        ap_done => grp_my_filter_v12_fu_354_ap_done,
        ap_idle => grp_my_filter_v12_fu_354_ap_idle,
        ap_ready => grp_my_filter_v12_fu_354_ap_ready,
        f_n_address0 => grp_my_filter_v12_fu_354_f_n_address0,
        f_n_ce0 => grp_my_filter_v12_fu_354_f_n_ce0,
        f_n_we0 => grp_my_filter_v12_fu_354_f_n_we0,
        f_n_d0 => grp_my_filter_v12_fu_354_f_n_d0,
        f_n_q0 => x_2_q0,
        f_address0 => grp_my_filter_v12_fu_354_f_address0,
        f_ce0 => grp_my_filter_v12_fu_354_f_ce0,
        f_q0 => x_bar_q0,
        f_address1 => grp_my_filter_v12_fu_354_f_address1,
        f_ce1 => grp_my_filter_v12_fu_354_f_ce1,
        f_q1 => x_bar_q1,
        adjChImg_address0 => grp_my_filter_v12_fu_354_adjChImg_address0,
        adjChImg_ce0 => grp_my_filter_v12_fu_354_adjChImg_ce0,
        adjChImg_q0 => adjChImg_q0,
        adjChImg_address1 => grp_my_filter_v12_fu_354_adjChImg_address1,
        adjChImg_ce1 => grp_my_filter_v12_fu_354_adjChImg_ce1,
        adjChImg_q1 => adjChImg_q1,
        adjChImg2_address0 => grp_my_filter_v12_fu_354_adjChImg2_address0,
        adjChImg2_ce0 => grp_my_filter_v12_fu_354_adjChImg2_ce0,
        adjChImg2_q0 => adjChImg2_q0,
        adjChImg2_address1 => grp_my_filter_v12_fu_354_adjChImg2_address1,
        adjChImg2_ce1 => grp_my_filter_v12_fu_354_adjChImg2_ce1,
        adjChImg2_q1 => adjChImg2_q1,
        g1_address0 => grp_my_filter_v12_fu_354_g1_address0,
        g1_ce0 => grp_my_filter_v12_fu_354_g1_ce0,
        g1_we0 => grp_my_filter_v12_fu_354_g1_we0,
        g1_d0 => grp_my_filter_v12_fu_354_g1_d0,
        g1_q0 => y_1_q0,
        g2_address0 => grp_my_filter_v12_fu_354_g2_address0,
        g2_ce0 => grp_my_filter_v12_fu_354_g2_ce0,
        g2_we0 => grp_my_filter_v12_fu_354_g2_we0,
        g2_d0 => grp_my_filter_v12_fu_354_g2_d0,
        g2_q0 => y_2_q0,
        g2_address1 => grp_my_filter_v12_fu_354_g2_address1,
        g2_ce1 => grp_my_filter_v12_fu_354_g2_ce1,
        g2_q1 => y_2_q1,
        g3_address0 => grp_my_filter_v12_fu_354_g3_address0,
        g3_ce0 => grp_my_filter_v12_fu_354_g3_ce0,
        g3_we0 => grp_my_filter_v12_fu_354_g3_we0,
        g3_d0 => grp_my_filter_v12_fu_354_g3_d0,
        g3_q0 => y_3_q0,
        g3_address1 => grp_my_filter_v12_fu_354_g3_address1,
        g3_ce1 => grp_my_filter_v12_fu_354_g3_ce1,
        g3_q1 => y_3_q1,
        g4_address0 => grp_my_filter_v12_fu_354_g4_address0,
        g4_ce0 => grp_my_filter_v12_fu_354_g4_ce0,
        g4_we0 => grp_my_filter_v12_fu_354_g4_we0,
        g4_d0 => grp_my_filter_v12_fu_354_g4_d0,
        g4_q0 => y_4_q0,
        g4_address1 => grp_my_filter_v12_fu_354_g4_address1,
        g4_ce1 => grp_my_filter_v12_fu_354_g4_ce1,
        g4_q1 => y_4_q1,
        g5_address0 => grp_my_filter_v12_fu_354_g5_address0,
        g5_ce0 => grp_my_filter_v12_fu_354_g5_ce0,
        g5_we0 => grp_my_filter_v12_fu_354_g5_we0,
        g5_d0 => grp_my_filter_v12_fu_354_g5_d0,
        g5_q0 => y_5_q0,
        g5_address1 => grp_my_filter_v12_fu_354_g5_address1,
        g5_ce1 => grp_my_filter_v12_fu_354_g5_ce1,
        g5_q1 => y_5_q1,
        g6_address0 => grp_my_filter_v12_fu_354_g6_address0,
        g6_ce0 => grp_my_filter_v12_fu_354_g6_ce0,
        g6_we0 => grp_my_filter_v12_fu_354_g6_we0,
        g6_d0 => grp_my_filter_v12_fu_354_g6_d0,
        g6_q0 => y_6_q0,
        g7_address0 => grp_my_filter_v12_fu_354_g7_address0,
        g7_ce0 => grp_my_filter_v12_fu_354_g7_ce0,
        g7_we0 => grp_my_filter_v12_fu_354_g7_we0,
        g7_d0 => grp_my_filter_v12_fu_354_g7_d0,
        g7_q0 => y_7_q0,
        g7_address1 => grp_my_filter_v12_fu_354_g7_address1,
        g7_ce1 => grp_my_filter_v12_fu_354_g7_ce1,
        g7_q1 => y_7_q1,
        g8_address0 => grp_my_filter_v12_fu_354_g8_address0,
        g8_ce0 => grp_my_filter_v12_fu_354_g8_ce0,
        g8_we0 => grp_my_filter_v12_fu_354_g8_we0,
        g8_d0 => grp_my_filter_v12_fu_354_g8_d0,
        g8_q0 => y_8_q0,
        g9_address0 => grp_my_filter_v12_fu_354_g9_address0,
        g9_ce0 => grp_my_filter_v12_fu_354_g9_ce0,
        g9_we0 => grp_my_filter_v12_fu_354_g9_we0,
        g9_d0 => grp_my_filter_v12_fu_354_g9_d0,
        g9_q0 => y_9_q0,
        g9_address1 => grp_my_filter_v12_fu_354_g9_address1,
        g9_ce1 => grp_my_filter_v12_fu_354_g9_ce1,
        g9_q1 => y_9_q1);

    grp_ProxGS4_fu_373 : component ProxGS4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ProxGS4_fu_373_ap_start,
        ap_done => grp_ProxGS4_fu_373_ap_done,
        ap_idle => grp_ProxGS4_fu_373_ap_idle,
        ap_ready => grp_ProxGS4_fu_373_ap_ready,
        x_io_address0 => grp_ProxGS4_fu_373_x_io_address0,
        x_io_ce0 => grp_ProxGS4_fu_373_x_io_ce0,
        x_io_we0 => grp_ProxGS4_fu_373_x_io_we0,
        x_io_d0 => grp_ProxGS4_fu_373_x_io_d0,
        x_io_q0 => x_2_q0,
        coe_a_M_real_address0 => grp_ProxGS4_fu_373_coe_a_M_real_address0,
        coe_a_M_real_ce0 => grp_ProxGS4_fu_373_coe_a_M_real_ce0,
        coe_a_M_real_q0 => coe_a_M_real_q0,
        coe_a_M_imag_address0 => grp_ProxGS4_fu_373_coe_a_M_imag_address0,
        coe_a_M_imag_ce0 => grp_ProxGS4_fu_373_coe_a_M_imag_ce0,
        coe_a_M_imag_q0 => coe_a_M_imag_q0,
        coe_b_address0 => grp_ProxGS4_fu_373_coe_b_address0,
        coe_b_ce0 => grp_ProxGS4_fu_373_coe_b_ce0,
        coe_b_q0 => coe_b_q0);

    grp_array_copy3_fu_384 : component array_copy3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_array_copy3_fu_384_ap_start,
        ap_done => grp_array_copy3_fu_384_ap_done,
        ap_idle => grp_array_copy3_fu_384_ap_idle,
        ap_ready => grp_array_copy3_fu_384_ap_ready,
        data_in_address0 => grp_array_copy3_fu_384_data_in_address0,
        data_in_ce0 => grp_array_copy3_fu_384_data_in_ce0,
        data_in_q0 => grp_array_copy3_fu_384_data_in_q0,
        data_out_address0 => grp_array_copy3_fu_384_data_out_address0,
        data_out_ce0 => grp_array_copy3_fu_384_data_out_ce0,
        data_out_we0 => grp_array_copy3_fu_384_data_out_we0,
        data_out_d0 => grp_array_copy3_fu_384_data_out_d0);

    DEBLUR_fsub_32ns_cud_U105 : component DEBLUR_fsub_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_2_load_reg_623,
        din1 => x_old_load_reg_628,
        ce => ap_const_logic_1,
        dout => grp_fu_393_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ProxGS4_fu_373_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ProxGS4_fu_373_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_ProxGS4_fu_373_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ProxGS4_fu_373_ap_ready = ap_const_logic_1)) then 
                    grp_ProxGS4_fu_373_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_array_copy3_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_array_copy3_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln105_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln105_fu_478_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_array_copy3_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_array_copy3_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_array_copy3_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_my_filter_v12_fu_354_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_my_filter_v12_fu_354_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_my_filter_v12_fu_354_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_my_filter_v12_fu_354_ap_ready = ap_const_logic_1)) then 
                    grp_my_filter_v12_fu_354_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_i_reg_343 <= i_reg_618;
            elsif (((grp_ProxGS4_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i_reg_343 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten11_reg_321 <= add_ln85_reg_593;
            elsif (((grp_ProxGS4_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                indvar_flatten11_reg_321 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten_reg_277 <= add_ln63_fu_403_p2;
            elsif (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_reg_277 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_0_i_reg_332 <= select_ln90_1_reg_598;
            elsif (((grp_ProxGS4_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_0_i_reg_332 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_0_reg_310 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln85_fu_490_p2 = ap_const_lv1_1))) then 
                k_0_reg_310 <= k_reg_585;
            end if; 
        end if;
    end process;

    x_0_i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_i_reg_299 <= x_fu_472_p2;
            elsif (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_i_reg_299 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_i_reg_288 <= select_ln68_1_fu_429_p3;
            elsif (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_i_reg_288 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln85_reg_593 <= add_ln85_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_reg_618 <= i_fu_558_p2;
                select_ln90_1_reg_598 <= select_ln90_1_fu_522_p3;
                    zext_ln90_1_reg_603(15 downto 0) <= zext_ln90_1_fu_552_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_reg_585 <= k_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_i6_reg_633 <= grp_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                x_2_load_reg_623 <= x_2_q0;
                x_old_load_reg_628 <= x_old_q0;
            end if;
        end if;
    end process;
    zext_ln90_1_reg_603(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln63_fu_397_p2, ap_CS_fsm_state7, ap_CS_fsm_state13, icmp_ln85_fu_490_p2, grp_my_filter_v12_fu_354_ap_done, grp_ProxGS4_fu_373_ap_done, grp_array_copy3_fu_384_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10, icmp_ln105_fu_478_p2, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln105_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_my_filter_v12_fu_354_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_ProxGS4_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln85_fu_490_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state21 => 
                if (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Img_address0_assign_proc : process(grp_array_copy3_fu_384_data_in_address0, grp_array_copy3_fu_384_data_out_address0, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Img_address0 <= grp_array_copy3_fu_384_data_out_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Img_address0 <= grp_array_copy3_fu_384_data_in_address0;
        else 
            Img_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Img_ce0_assign_proc : process(grp_array_copy3_fu_384_data_in_ce0, grp_array_copy3_fu_384_data_out_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Img_ce0 <= grp_array_copy3_fu_384_data_out_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Img_ce0 <= grp_array_copy3_fu_384_data_in_ce0;
        else 
            Img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Img_d0 <= grp_array_copy3_fu_384_data_out_d0;

    Img_we0_assign_proc : process(grp_array_copy3_fu_384_data_out_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Img_we0 <= grp_array_copy3_fu_384_data_out_we0;
        else 
            Img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln63_fu_403_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_277) + unsigned(ap_const_lv15_1));
    add_ln68_fu_453_p2 <= std_logic_vector(unsigned(zext_ln68_fu_449_p1) + unsigned(zext_ln66_fu_445_p1));
    add_ln85_fu_496_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_321) + unsigned(ap_const_lv15_1));
    add_ln90_fu_546_p2 <= std_logic_vector(unsigned(zext_ln90_fu_542_p1) + unsigned(zext_ln88_fu_538_p1));
    adjChImg2_address0 <= grp_my_filter_v12_fu_354_adjChImg2_address0;
    adjChImg2_address1 <= grp_my_filter_v12_fu_354_adjChImg2_address1;
    adjChImg2_ce0 <= grp_my_filter_v12_fu_354_adjChImg2_ce0;
    adjChImg2_ce1 <= grp_my_filter_v12_fu_354_adjChImg2_ce1;
    adjChImg_address0 <= grp_my_filter_v12_fu_354_adjChImg_address0;
    adjChImg_address1 <= grp_my_filter_v12_fu_354_adjChImg_address1;
    adjChImg_ce0 <= grp_my_filter_v12_fu_354_adjChImg_ce0;
    adjChImg_ce1 <= grp_my_filter_v12_fu_354_adjChImg_ce1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_array_copy3_fu_384_ap_done, ap_CS_fsm_state21)
    begin
        if ((((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_array_copy3_fu_384_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_array_copy3_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    coe_a_M_imag_address0 <= grp_ProxGS4_fu_373_coe_a_M_imag_address0;
    coe_a_M_imag_ce0 <= grp_ProxGS4_fu_373_coe_a_M_imag_ce0;
    coe_a_M_real_address0 <= grp_ProxGS4_fu_373_coe_a_M_real_address0;
    coe_a_M_real_ce0 <= grp_ProxGS4_fu_373_coe_a_M_real_ce0;
    coe_b_address0 <= grp_ProxGS4_fu_373_coe_b_address0;
    coe_b_ce0 <= grp_ProxGS4_fu_373_coe_b_ce0;
    grp_ProxGS4_fu_373_ap_start <= grp_ProxGS4_fu_373_ap_start_reg;
    grp_array_copy3_fu_384_ap_start <= grp_array_copy3_fu_384_ap_start_reg;

    grp_array_copy3_fu_384_data_in_q0_assign_proc : process(Img_q0, x_2_q0, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_array_copy3_fu_384_data_in_q0 <= x_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_array_copy3_fu_384_data_in_q0 <= Img_q0;
        else 
            grp_array_copy3_fu_384_data_in_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_my_filter_v12_fu_354_ap_start <= grp_my_filter_v12_fu_354_ap_start_reg;
    i_fu_558_p2 <= std_logic_vector(unsigned(select_ln90_fu_514_p3) + unsigned(ap_const_lv8_1));
    icmp_ln105_fu_478_p2 <= "1" when (k_0_reg_310 = ap_const_lv4_A) else "0";
    icmp_ln63_fu_397_p2 <= "1" when (indvar_flatten_reg_277 = ap_const_lv15_4000) else "0";
    icmp_ln65_fu_415_p2 <= "1" when (x_0_i_reg_299 = ap_const_lv8_80) else "0";
    icmp_ln85_fu_490_p2 <= "1" when (indvar_flatten11_reg_321 = ap_const_lv15_4000) else "0";
    icmp_ln87_fu_508_p2 <= "1" when (i_0_i_reg_343 = ap_const_lv8_80) else "0";
    j_fu_502_p2 <= std_logic_vector(unsigned(j_0_i_reg_332) + unsigned(ap_const_lv8_1));
    k_fu_484_p2 <= std_logic_vector(unsigned(k_0_reg_310) + unsigned(ap_const_lv4_1));
    select_ln68_1_fu_429_p3 <= 
        y_fu_409_p2 when (icmp_ln65_fu_415_p2(0) = '1') else 
        y_0_i_reg_288;
    select_ln68_fu_421_p3 <= 
        ap_const_lv8_0 when (icmp_ln65_fu_415_p2(0) = '1') else 
        x_0_i_reg_299;
    select_ln90_1_fu_522_p3 <= 
        j_fu_502_p2 when (icmp_ln87_fu_508_p2(0) = '1') else 
        j_0_i_reg_332;
    select_ln90_fu_514_p3 <= 
        ap_const_lv8_0 when (icmp_ln87_fu_508_p2(0) = '1') else 
        i_0_i_reg_343;
    tmp_fu_437_p3 <= (select_ln68_1_fu_429_p3 & ap_const_lv7_0);
    tmp_s_fu_530_p3 <= (select_ln90_1_fu_522_p3 & ap_const_lv7_0);

    x_2_address0_assign_proc : process(ap_CS_fsm_state13, zext_ln90_1_fu_552_p1, grp_my_filter_v12_fu_354_f_n_address0, grp_ProxGS4_fu_373_x_io_address0, grp_array_copy3_fu_384_data_in_address0, grp_array_copy3_fu_384_data_out_address0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_2_address0 <= zext_ln90_1_fu_552_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_2_address0 <= grp_array_copy3_fu_384_data_out_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_2_address0 <= grp_array_copy3_fu_384_data_in_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_2_address0 <= grp_ProxGS4_fu_373_x_io_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_2_address0 <= grp_my_filter_v12_fu_354_f_n_address0;
        else 
            x_2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_2_ce0_assign_proc : process(ap_CS_fsm_state13, grp_my_filter_v12_fu_354_f_n_ce0, grp_ProxGS4_fu_373_x_io_ce0, grp_array_copy3_fu_384_data_in_ce0, grp_array_copy3_fu_384_data_out_ce0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_2_ce0 <= grp_array_copy3_fu_384_data_out_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_2_ce0 <= grp_array_copy3_fu_384_data_in_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_2_ce0 <= grp_ProxGS4_fu_373_x_io_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_2_ce0 <= grp_my_filter_v12_fu_354_f_n_ce0;
        else 
            x_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_2_d0_assign_proc : process(grp_my_filter_v12_fu_354_f_n_d0, grp_ProxGS4_fu_373_x_io_d0, grp_array_copy3_fu_384_data_out_d0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_2_d0 <= grp_array_copy3_fu_384_data_out_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_2_d0 <= grp_ProxGS4_fu_373_x_io_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_2_d0 <= grp_my_filter_v12_fu_354_f_n_d0;
        else 
            x_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_2_we0_assign_proc : process(grp_my_filter_v12_fu_354_f_n_we0, grp_ProxGS4_fu_373_x_io_we0, grp_array_copy3_fu_384_data_out_we0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_2_we0 <= grp_array_copy3_fu_384_data_out_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_2_we0 <= grp_ProxGS4_fu_373_x_io_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_2_we0 <= grp_my_filter_v12_fu_354_f_n_we0;
        else 
            x_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_address0_assign_proc : process(zext_ln90_1_reg_603, grp_my_filter_v12_fu_354_f_address0, grp_array_copy3_fu_384_data_out_address0, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x_bar_address0 <= zext_ln90_1_reg_603(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_address0 <= grp_array_copy3_fu_384_data_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_address0 <= grp_my_filter_v12_fu_354_f_address0;
        else 
            x_bar_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_bar_ce0_assign_proc : process(grp_my_filter_v12_fu_354_f_ce0, grp_array_copy3_fu_384_data_out_ce0, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x_bar_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_ce0 <= grp_array_copy3_fu_384_data_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_ce0 <= grp_my_filter_v12_fu_354_f_ce0;
        else 
            x_bar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_ce1_assign_proc : process(grp_my_filter_v12_fu_354_f_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_ce1 <= grp_my_filter_v12_fu_354_f_ce1;
        else 
            x_bar_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_d0_assign_proc : process(tmp_i6_reg_633, grp_array_copy3_fu_384_data_out_d0, ap_CS_fsm_state20, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x_bar_d0 <= tmp_i6_reg_633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_d0 <= grp_array_copy3_fu_384_data_out_d0;
        else 
            x_bar_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_bar_we0_assign_proc : process(grp_array_copy3_fu_384_data_out_we0, ap_CS_fsm_state20, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x_bar_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_we0 <= grp_array_copy3_fu_384_data_out_we0;
        else 
            x_bar_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_472_p2 <= std_logic_vector(unsigned(select_ln68_fu_421_p3) + unsigned(ap_const_lv8_1));

    x_old_address0_assign_proc : process(ap_CS_fsm_state13, zext_ln90_1_fu_552_p1, grp_array_copy3_fu_384_data_out_address0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_old_address0 <= zext_ln90_1_fu_552_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_address0 <= grp_array_copy3_fu_384_data_out_address0;
        else 
            x_old_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_old_ce0_assign_proc : process(ap_CS_fsm_state13, grp_array_copy3_fu_384_data_out_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_old_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_ce0 <= grp_array_copy3_fu_384_data_out_ce0;
        else 
            x_old_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_old_we0_assign_proc : process(grp_array_copy3_fu_384_data_out_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_we0 <= grp_array_copy3_fu_384_data_out_we0;
        else 
            x_old_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g1_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_1_address0 <= grp_my_filter_v12_fu_354_g1_address0;
        else 
            y_1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_1_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g1_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_1_ce0 <= grp_my_filter_v12_fu_354_g1_ce0;
        else 
            y_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g1_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_1_d0 <= grp_my_filter_v12_fu_354_g1_d0;
        else 
            y_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_1_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g1_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_1_we0 <= grp_my_filter_v12_fu_354_g1_we0;
        else 
            y_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g2_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_2_address0 <= grp_my_filter_v12_fu_354_g2_address0;
        else 
            y_2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_2_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g2_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_2_ce0 <= grp_my_filter_v12_fu_354_g2_ce0;
        else 
            y_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g2_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_2_ce1 <= grp_my_filter_v12_fu_354_g2_ce1;
        else 
            y_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g2_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_2_d0 <= grp_my_filter_v12_fu_354_g2_d0;
        else 
            y_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_2_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g2_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_2_we0 <= grp_my_filter_v12_fu_354_g2_we0;
        else 
            y_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g3_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_3_address0 <= grp_my_filter_v12_fu_354_g3_address0;
        else 
            y_3_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_3_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g3_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_3_ce0 <= grp_my_filter_v12_fu_354_g3_ce0;
        else 
            y_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g3_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_3_ce1 <= grp_my_filter_v12_fu_354_g3_ce1;
        else 
            y_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g3_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_3_d0 <= grp_my_filter_v12_fu_354_g3_d0;
        else 
            y_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_3_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g3_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_3_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_3_we0 <= grp_my_filter_v12_fu_354_g3_we0;
        else 
            y_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g4_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_4_address0 <= grp_my_filter_v12_fu_354_g4_address0;
        else 
            y_4_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_4_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g4_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_4_ce0 <= grp_my_filter_v12_fu_354_g4_ce0;
        else 
            y_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g4_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_4_ce1 <= grp_my_filter_v12_fu_354_g4_ce1;
        else 
            y_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g4_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_4_d0 <= grp_my_filter_v12_fu_354_g4_d0;
        else 
            y_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_4_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g4_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_4_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_4_we0 <= grp_my_filter_v12_fu_354_g4_we0;
        else 
            y_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g5_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_5_address0 <= grp_my_filter_v12_fu_354_g5_address0;
        else 
            y_5_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_5_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g5_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_5_ce0 <= grp_my_filter_v12_fu_354_g5_ce0;
        else 
            y_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g5_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_5_ce1 <= grp_my_filter_v12_fu_354_g5_ce1;
        else 
            y_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g5_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_5_d0 <= grp_my_filter_v12_fu_354_g5_d0;
        else 
            y_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_5_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g5_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_5_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_5_we0 <= grp_my_filter_v12_fu_354_g5_we0;
        else 
            y_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g6_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_6_address0 <= grp_my_filter_v12_fu_354_g6_address0;
        else 
            y_6_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_6_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g6_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_6_ce0 <= grp_my_filter_v12_fu_354_g6_ce0;
        else 
            y_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g6_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_6_d0 <= grp_my_filter_v12_fu_354_g6_d0;
        else 
            y_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_6_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g6_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_6_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_6_we0 <= grp_my_filter_v12_fu_354_g6_we0;
        else 
            y_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g7_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_7_address0 <= grp_my_filter_v12_fu_354_g7_address0;
        else 
            y_7_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_7_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g7_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_7_ce0 <= grp_my_filter_v12_fu_354_g7_ce0;
        else 
            y_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g7_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_7_ce1 <= grp_my_filter_v12_fu_354_g7_ce1;
        else 
            y_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g7_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_7_d0 <= grp_my_filter_v12_fu_354_g7_d0;
        else 
            y_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_7_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g7_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_7_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_7_we0 <= grp_my_filter_v12_fu_354_g7_we0;
        else 
            y_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_8_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g8_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_8_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_8_address0 <= grp_my_filter_v12_fu_354_g8_address0;
        else 
            y_8_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_8_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g8_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_8_ce0 <= grp_my_filter_v12_fu_354_g8_ce0;
        else 
            y_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_8_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g8_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_8_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_8_d0 <= grp_my_filter_v12_fu_354_g8_d0;
        else 
            y_8_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_8_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g8_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_8_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_8_we0 <= grp_my_filter_v12_fu_354_g8_we0;
        else 
            y_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_9_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g9_address0, ap_CS_fsm_state10, zext_ln68_1_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_9_address0 <= zext_ln68_1_fu_459_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_9_address0 <= grp_my_filter_v12_fu_354_g9_address0;
        else 
            y_9_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_9_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g9_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_9_ce0 <= grp_my_filter_v12_fu_354_g9_ce0;
        else 
            y_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_9_ce1_assign_proc : process(grp_my_filter_v12_fu_354_g9_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_9_ce1 <= grp_my_filter_v12_fu_354_g9_ce1;
        else 
            y_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_9_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v12_fu_354_g9_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_9_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_9_d0 <= grp_my_filter_v12_fu_354_g9_d0;
        else 
            y_9_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_9_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln63_fu_397_p2, grp_my_filter_v12_fu_354_g9_we0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln63_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_9_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_9_we0 <= grp_my_filter_v12_fu_354_g9_we0;
        else 
            y_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_fu_409_p2 <= std_logic_vector(unsigned(y_0_i_reg_288) + unsigned(ap_const_lv8_1));
    zext_ln66_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_437_p3),16));
    zext_ln68_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_453_p2),64));
    zext_ln68_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_421_p3),16));
    zext_ln88_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_530_p3),16));
    zext_ln90_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_fu_546_p2),64));
    zext_ln90_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_fu_514_p3),16));
end behav;
