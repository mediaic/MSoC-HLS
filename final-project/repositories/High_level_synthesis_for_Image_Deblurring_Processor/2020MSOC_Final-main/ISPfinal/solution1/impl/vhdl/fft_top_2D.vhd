-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_top_2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    direction : IN STD_LOGIC;
    in_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_M_real_ce0 : OUT STD_LOGIC;
    in_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_M_imag_ce0 : OUT STD_LOGIC;
    in_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_real_ce0 : OUT STD_LOGIC;
    out_M_real_we0 : OUT STD_LOGIC;
    out_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_M_imag_ce0 : OUT STD_LOGIC;
    out_M_imag_we0 : OUT STD_LOGIC;
    out_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_top_2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln199_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln199_1_fu_338_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln203_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln203_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln202_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln203_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_434_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln210_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln210_reg_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln209_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln217_fu_485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln217_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln216_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln217_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln223_fu_575_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln223_reg_710 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln222_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_out_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffer_out_ce0 : STD_LOGIC;
    signal buffer_out_we0 : STD_LOGIC;
    signal buffer_out_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_out_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffer_in_ce0 : STD_LOGIC;
    signal buffer_in_we0 : STD_LOGIC;
    signal buffer_in_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_in_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_304_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fft_top_fu_304_in_r_ce0 : STD_LOGIC;
    signal grp_fft_top_fu_304_in_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_304_in_r_we0 : STD_LOGIC;
    signal grp_fft_top_fu_304_in_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fft_top_fu_304_in_r_ce1 : STD_LOGIC;
    signal grp_fft_top_fu_304_in_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_304_in_r_we1 : STD_LOGIC;
    signal grp_fft_top_fu_304_out_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fft_top_fu_304_out_r_ce0 : STD_LOGIC;
    signal grp_fft_top_fu_304_out_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_304_out_r_we0 : STD_LOGIC;
    signal grp_fft_top_fu_304_out_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fft_top_fu_304_out_r_ce1 : STD_LOGIC;
    signal grp_fft_top_fu_304_out_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_top_fu_304_out_r_we1 : STD_LOGIC;
    signal grp_fft_top_fu_304_direction_ap_ack : STD_LOGIC;
    signal grp_fft_top_fu_304_ap_start : STD_LOGIC;
    signal grp_fft_top_fu_304_ap_done : STD_LOGIC;
    signal grp_fft_top_fu_304_ap_ready : STD_LOGIC;
    signal grp_fft_top_fu_304_ap_idle : STD_LOGIC;
    signal grp_fft_top_fu_304_ap_continue : STD_LOGIC;
    signal phi_ln199_reg_214 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln199_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln199_1_reg_225 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln199_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_247 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_0_reg_259 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_sync_grp_fft_top_fu_304_ap_ready : STD_LOGIC;
    signal ap_sync_grp_fft_top_fu_304_ap_done : STD_LOGIC;
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j2_0_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal i3_0_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i4_0_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fft_top_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_top_fu_304_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_top_fu_304_ap_done : STD_LOGIC := '0';
    signal zext_ln199_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_1_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln204_2_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln204_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_2_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_2_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_2_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_in_M_imag_ad_fu_419_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_in_M_imag_ad_1_fu_537_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln210_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln223_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln210_1_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln223_1_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_367_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln204_1_fu_391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln204_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln204_1_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln204_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln210_1_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln210_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_142_fu_501_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln218_1_fu_509_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln218_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln218_1_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln218_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_fu_563_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln223_1_fu_571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln223_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component fft_top IS
    port (
        direction : IN STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_we0 : OUT STD_LOGIC;
        in_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_we1 : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_we0 : OUT STD_LOGIC;
        out_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        direction_ap_vld : IN STD_LOGIC;
        direction_ap_ack : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fft_top_2D_bufferocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    buffer_out_U : component fft_top_2D_bufferocq
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_out_address0,
        ce0 => buffer_out_ce0,
        we0 => buffer_out_we0,
        d0 => buffer_out_d0,
        q0 => buffer_out_q0);

    buffer_in_U : component fft_top_2D_bufferocq
    generic map (
        DataWidth => 64,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_in_address0,
        ce0 => buffer_in_ce0,
        we0 => buffer_in_we0,
        d0 => buffer_in_d0,
        q0 => buffer_in_q0);

    grp_fft_top_fu_304 : component fft_top
    port map (
        direction => direction,
        in_r_address0 => grp_fft_top_fu_304_in_r_address0,
        in_r_ce0 => grp_fft_top_fu_304_in_r_ce0,
        in_r_d0 => grp_fft_top_fu_304_in_r_d0,
        in_r_q0 => buffer_in_q0,
        in_r_we0 => grp_fft_top_fu_304_in_r_we0,
        in_r_address1 => grp_fft_top_fu_304_in_r_address1,
        in_r_ce1 => grp_fft_top_fu_304_in_r_ce1,
        in_r_d1 => grp_fft_top_fu_304_in_r_d1,
        in_r_q1 => ap_const_lv64_0,
        in_r_we1 => grp_fft_top_fu_304_in_r_we1,
        out_r_address0 => grp_fft_top_fu_304_out_r_address0,
        out_r_ce0 => grp_fft_top_fu_304_out_r_ce0,
        out_r_d0 => grp_fft_top_fu_304_out_r_d0,
        out_r_q0 => ap_const_lv64_0,
        out_r_we0 => grp_fft_top_fu_304_out_r_we0,
        out_r_address1 => grp_fft_top_fu_304_out_r_address1,
        out_r_ce1 => grp_fft_top_fu_304_out_r_ce1,
        out_r_d1 => grp_fft_top_fu_304_out_r_d1,
        out_r_q1 => ap_const_lv64_0,
        out_r_we1 => grp_fft_top_fu_304_out_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        direction_ap_vld => ap_const_logic_1,
        direction_ap_ack => grp_fft_top_fu_304_direction_ap_ack,
        ap_start => grp_fft_top_fu_304_ap_start,
        ap_done => grp_fft_top_fu_304_ap_done,
        ap_ready => grp_fft_top_fu_304_ap_ready,
        ap_idle => grp_fft_top_fu_304_ap_idle,
        ap_continue => grp_fft_top_fu_304_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_304_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_304_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    ap_sync_reg_grp_fft_top_fu_304_ap_done <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_304_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_304_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_304_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_304_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    ap_sync_reg_grp_fft_top_fu_304_ap_ready <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_304_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_304_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_top_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_top_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln203_fu_379_p2 = ap_const_lv1_1)) or ((ap_sync_grp_fft_top_fu_304_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_sync_grp_fft_top_fu_304_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln217_fu_489_p2 = ap_const_lv1_1)))) then 
                    grp_fft_top_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_top_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_fft_top_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i3_0_reg_281 <= i_reg_687;
            elsif (((icmp_ln216_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i3_0_reg_281 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i4_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i4_0_reg_293 <= i_2_reg_705;
            elsif (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i4_0_reg_293 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_1_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_236 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln209_fu_428_p2 = ap_const_lv1_1))) then 
                i_0_reg_236 <= i_1_reg_623;
            end if; 
        end if;
    end process;

    j2_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j2_0_reg_270 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_546_p2 = ap_const_lv1_1))) then 
                j2_0_reg_270 <= j_1_reg_673;
            end if; 
        end if;
    end process;

    j_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_247 <= j_reg_637;
            elsif (((icmp_ln202_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_247 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_0_reg_259 <= k_reg_655;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_0_reg_259 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_ln199_1_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln199_1_reg_225 <= ap_const_lv7_0;
            elsif (((icmp_ln199_1_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln199_1_reg_225 <= add_ln199_1_fu_338_p2;
            end if; 
        end if;
    end process;

    phi_ln199_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln199_reg_214 <= add_ln199_fu_321_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln199_reg_214 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln209_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln210_reg_660 <= add_ln210_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                add_ln223_reg_710 <= add_ln223_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_623 <= i_1_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_2_reg_705 <= i_2_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_reg_687 <= i_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_1_reg_673 <= j_1_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_637 <= j_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                k_reg_655 <= k_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln203_reg_628(14 downto 7) <= zext_ln203_fu_375_p1(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln217_reg_678(7 downto 0) <= zext_ln217_fu_485_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln203_reg_628(6 downto 0) <= "0000000";
    zext_ln203_reg_628(15) <= '0';
    zext_ln217_reg_678(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln202_fu_355_p2, ap_CS_fsm_state5, icmp_ln203_fu_379_p2, ap_CS_fsm_state8, icmp_ln209_fu_428_p2, ap_CS_fsm_state10, icmp_ln216_fu_473_p2, ap_CS_fsm_state11, icmp_ln217_fu_489_p2, ap_CS_fsm_state14, icmp_ln222_fu_546_p2, icmp_ln199_fu_332_p2, icmp_ln199_1_fu_349_p2, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_CS_fsm_state13, ap_block_state13_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln199_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln199_1_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln202_fu_355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln203_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln209_fu_428_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln216_fu_473_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln217_fu_489_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_546_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln199_1_fu_338_p2 <= std_logic_vector(unsigned(phi_ln199_1_reg_225) + unsigned(ap_const_lv7_1));
    add_ln199_fu_321_p2 <= std_logic_vector(unsigned(phi_ln199_reg_214) + unsigned(ap_const_lv7_1));
    add_ln204_fu_395_p2 <= std_logic_vector(unsigned(zext_ln203_reg_628) + unsigned(zext_ln204_1_fu_391_p1));
    add_ln210_fu_449_p2 <= std_logic_vector(unsigned(zext_ln210_1_fu_445_p1) + unsigned(zext_ln203_reg_628));
    add_ln218_fu_513_p2 <= std_logic_vector(unsigned(zext_ln217_reg_678) + unsigned(zext_ln218_1_fu_509_p1));
    add_ln223_fu_575_p2 <= std_logic_vector(unsigned(zext_ln223_1_fu_571_p1) + unsigned(zext_ln217_reg_678));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_on_subcall_done_assign_proc : process(ap_sync_grp_fft_top_fu_304_ap_ready, ap_sync_grp_fft_top_fu_304_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((ap_sync_grp_fft_top_fu_304_ap_ready and ap_sync_grp_fft_top_fu_304_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(ap_sync_grp_fft_top_fu_304_ap_ready, ap_sync_grp_fft_top_fu_304_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((ap_sync_grp_fft_top_fu_304_ap_ready and ap_sync_grp_fft_top_fu_304_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln216_fu_473_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln216_fu_473_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln216_fu_473_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln216_fu_473_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_fft_top_fu_304_ap_done <= (grp_fft_top_fu_304_ap_done or ap_sync_reg_grp_fft_top_fu_304_ap_done);
    ap_sync_grp_fft_top_fu_304_ap_ready <= (grp_fft_top_fu_304_ap_ready or ap_sync_reg_grp_fft_top_fu_304_ap_ready);
    bitcast_ln204_1_fu_415_p1 <= in_M_imag_q0;
    bitcast_ln204_fu_411_p1 <= in_M_real_q0;
    bitcast_ln210_1_fu_468_p1 <= grp_fu_311_p4;
    bitcast_ln210_fu_463_p1 <= trunc_ln210_fu_459_p1;
    bitcast_ln218_1_fu_533_p1 <= in_M_imag_q0;
    bitcast_ln218_fu_529_p1 <= in_M_real_q0;
    bitcast_ln223_1_fu_594_p1 <= grp_fu_311_p4;
    bitcast_ln223_fu_589_p1 <= trunc_ln223_fu_585_p1;
    buffer_in_M_imag_ad_1_fu_537_p3 <= (bitcast_ln218_1_fu_533_p1 & bitcast_ln218_fu_529_p1);
    buffer_in_M_imag_ad_fu_419_p3 <= (bitcast_ln204_1_fu_415_p1 & bitcast_ln204_fu_411_p1);

    buffer_in_address0_assign_proc : process(ap_CS_fsm_state2, grp_fft_top_fu_304_in_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln199_fu_327_p1, zext_ln204_fu_406_p1, zext_ln218_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_in_address0 <= zext_ln218_fu_524_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_in_address0 <= zext_ln204_fu_406_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_in_address0 <= zext_ln199_fu_327_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_in_address0 <= grp_fft_top_fu_304_in_r_address0;
        else 
            buffer_in_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffer_in_ce0_assign_proc : process(ap_CS_fsm_state2, grp_fft_top_fu_304_in_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_in_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_in_ce0 <= grp_fft_top_fu_304_in_r_ce0;
        else 
            buffer_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_in_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state12, buffer_in_M_imag_ad_fu_419_p3, buffer_in_M_imag_ad_1_fu_537_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_in_d0 <= buffer_in_M_imag_ad_1_fu_537_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_in_d0 <= buffer_in_M_imag_ad_fu_419_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_in_d0 <= ap_const_lv64_0;
        else 
            buffer_in_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_in_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_in_we0 <= ap_const_logic_1;
        else 
            buffer_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_out_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state14, grp_fft_top_fu_304_out_r_address0, ap_CS_fsm_state7, ap_CS_fsm_state13, zext_ln199_1_fu_344_p1, zext_ln210_fu_440_p1, zext_ln223_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_out_address0 <= zext_ln223_fu_558_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_out_address0 <= zext_ln210_fu_440_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_out_address0 <= zext_ln199_1_fu_344_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_out_address0 <= grp_fft_top_fu_304_out_r_address0;
        else 
            buffer_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffer_out_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state14, grp_fft_top_fu_304_out_r_ce0, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            buffer_out_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_out_ce0 <= grp_fft_top_fu_304_out_r_ce0;
        else 
            buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_out_d0_assign_proc : process(ap_CS_fsm_state3, grp_fft_top_fu_304_out_r_d0, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_out_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_out_d0 <= grp_fft_top_fu_304_out_r_d0;
        else 
            buffer_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_out_we0_assign_proc : process(ap_CS_fsm_state3, grp_fft_top_fu_304_out_r_we0, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_out_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            buffer_out_we0 <= grp_fft_top_fu_304_out_r_we0;
        else 
            buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fft_top_fu_304_ap_continue_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_CS_fsm_state13, ap_block_state13_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fft_top_fu_304_ap_continue <= ap_const_logic_1;
        else 
            grp_fft_top_fu_304_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_top_fu_304_ap_start <= grp_fft_top_fu_304_ap_start_reg;
    grp_fu_311_p4 <= buffer_out_q0(63 downto 32);
    i_1_fu_361_p2 <= std_logic_vector(unsigned(i_0_reg_236) + unsigned(ap_const_lv8_1));
    i_2_fu_552_p2 <= std_logic_vector(unsigned(i4_0_reg_293) + unsigned(ap_const_lv8_1));
    i_fu_495_p2 <= std_logic_vector(unsigned(i3_0_reg_281) + unsigned(ap_const_lv8_1));
    icmp_ln199_1_fu_349_p2 <= "1" when (phi_ln199_1_reg_225 = ap_const_lv7_7F) else "0";
    icmp_ln199_fu_332_p2 <= "1" when (phi_ln199_reg_214 = ap_const_lv7_7F) else "0";
    icmp_ln202_fu_355_p2 <= "1" when (i_0_reg_236 = ap_const_lv8_80) else "0";
    icmp_ln203_fu_379_p2 <= "1" when (j_0_reg_247 = ap_const_lv8_80) else "0";
    icmp_ln209_fu_428_p2 <= "1" when (k_0_reg_259 = ap_const_lv8_80) else "0";
    icmp_ln216_fu_473_p2 <= "1" when (j2_0_reg_270 = ap_const_lv8_80) else "0";
    icmp_ln217_fu_489_p2 <= "1" when (i3_0_reg_281 = ap_const_lv8_80) else "0";
    icmp_ln222_fu_546_p2 <= "1" when (i4_0_reg_293 = ap_const_lv8_80) else "0";

    in_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11, zext_ln204_2_fu_400_p1, zext_ln218_2_fu_518_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_M_imag_address0 <= zext_ln218_2_fu_518_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_M_imag_address0 <= zext_ln204_2_fu_400_p1(14 - 1 downto 0);
        else 
            in_M_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_M_imag_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            in_M_imag_ce0 <= ap_const_logic_1;
        else 
            in_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_M_real_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11, zext_ln204_2_fu_400_p1, zext_ln218_2_fu_518_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_M_real_address0 <= zext_ln218_2_fu_518_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_M_real_address0 <= zext_ln204_2_fu_400_p1(14 - 1 downto 0);
        else 
            in_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_M_real_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            in_M_real_ce0 <= ap_const_logic_1;
        else 
            in_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_479_p2 <= std_logic_vector(unsigned(j2_0_reg_270) + unsigned(ap_const_lv8_1));
    j_fu_385_p2 <= std_logic_vector(unsigned(j_0_reg_247) + unsigned(ap_const_lv8_1));
    k_fu_434_p2 <= std_logic_vector(unsigned(k_0_reg_259) + unsigned(ap_const_lv8_1));

    out_M_imag_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln210_2_fu_454_p1, zext_ln223_2_fu_580_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_M_imag_address0 <= zext_ln223_2_fu_580_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_M_imag_address0 <= zext_ln210_2_fu_454_p1(14 - 1 downto 0);
        else 
            out_M_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_M_imag_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_M_imag_ce0 <= ap_const_logic_1;
        else 
            out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_M_imag_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, bitcast_ln210_1_fu_468_p1, bitcast_ln223_1_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_M_imag_d0 <= bitcast_ln223_1_fu_594_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_M_imag_d0 <= bitcast_ln210_1_fu_468_p1;
        else 
            out_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_M_imag_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_M_imag_we0 <= ap_const_logic_1;
        else 
            out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_M_real_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln210_2_fu_454_p1, zext_ln223_2_fu_580_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_M_real_address0 <= zext_ln223_2_fu_580_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_M_real_address0 <= zext_ln210_2_fu_454_p1(14 - 1 downto 0);
        else 
            out_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_M_real_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_M_real_ce0 <= ap_const_logic_1;
        else 
            out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_M_real_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, bitcast_ln210_fu_463_p1, bitcast_ln223_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_M_real_d0 <= bitcast_ln223_fu_589_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_M_real_d0 <= bitcast_ln210_fu_463_p1;
        else 
            out_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_M_real_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_M_real_we0 <= ap_const_logic_1;
        else 
            out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_142_fu_501_p3 <= (i3_0_reg_281 & ap_const_lv7_0);
    tmp_143_fu_563_p3 <= (i4_0_reg_293 & ap_const_lv7_0);
    tmp_s_fu_367_p3 <= (i_0_reg_236 & ap_const_lv7_0);
    trunc_ln210_fu_459_p1 <= buffer_out_q0(32 - 1 downto 0);
    trunc_ln223_fu_585_p1 <= buffer_out_q0(32 - 1 downto 0);
    zext_ln199_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln199_1_reg_225),64));
    zext_ln199_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln199_reg_214),64));
    zext_ln203_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_367_p3),16));
    zext_ln204_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_247),16));
    zext_ln204_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_fu_395_p2),64));
    zext_ln204_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_247),64));
    zext_ln210_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_259),16));
    zext_ln210_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln210_reg_660),64));
    zext_ln210_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_259),64));
    zext_ln217_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_270),16));
    zext_ln218_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_501_p3),16));
    zext_ln218_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_513_p2),64));
    zext_ln218_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_281),64));
    zext_ln223_1_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_563_p3),16));
    zext_ln223_2_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_reg_710),64));
    zext_ln223_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_293),64));
end behav;
